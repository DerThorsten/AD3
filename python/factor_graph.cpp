/* Generated by Cython 0.25.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_25_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x03030000 || (PY_MAJOR_VERSION == 2 && PY_VERSION_HEX >= 0x02070000)
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_FASTCALL
  #define METH_FASTCALL 0x80
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject **args,
                                              Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && METH_FASTCALL == PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; };
    template<typename U> bool operator !=(U other) { return *ptr != other; };
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__ad3__python__factor_graph
#define __PYX_HAVE_API__ad3__python__factor_graph
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "../ad3/Factor.h"
#include "../ad3/MultiVariable.h"
#include "../ad3/FactorGraph.h"
#include "../examples/dense/FactorSequence.h"
#include "../examples/summarization/FactorSequenceCompressor.h"
#include "../examples/summarization/FactorCompressionBudget.h"
#include "../examples/summarization/FactorBinaryTree.h"
#include "../examples/summarization/FactorBinaryTreeCounts.h"
#include "../examples/summarization/FactorGeneralTree.h"
#include "../examples/summarization/FactorGeneralTreeCounts.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "ad3/python/factor_graph.pyx",
  "ad3/python/stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable;
struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactor;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts;
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph;

/* "ad3/python/factor_graph.pyx":146
 * 
 * # wrap them into python extension types
 * cdef class PBinaryVariable:             # <<<<<<<<<<<<<<
 *     cdef BinaryVariable *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable {
  PyObject_HEAD
  AD3::BinaryVariable *thisptr;
  bool allocate;
};


/* "ad3/python/factor_graph.pyx":171
 * 
 * 
 * cdef class PMultiVariable:             # <<<<<<<<<<<<<<
 *     cdef MultiVariable *thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable {
  PyObject_HEAD
  AD3::MultiVariable *thisptr;
  bool allocate;
};


/* "ad3/python/factor_graph.pyx":196
 * 
 * 
 * cdef class PFactor:             # <<<<<<<<<<<<<<
 *     cdef Factor* thisptr
 *     cdef bool allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactor {
  PyObject_HEAD
  AD3::Factor *thisptr;
  bool allocate;
};


/* "ad3/python/factor_graph.pyx":251
 *         return value, p_posteriors, p_additional_posteriors
 * 
 * cdef class PFactorSequence(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":265
 * 
 * 
 * cdef class PFactorSequenceCompressor(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":279
 * 
 * 
 * cdef class PFactorCompressionBudget(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":298
 * 
 * 
 * cdef class PFactorBinaryTree(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":312
 * 
 * 
 * cdef class PFactorBinaryTreeCounts(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":348
 * 
 * 
 * cdef class PFactorGeneralTree(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":362
 * 
 * 
 * cdef class PFactorGeneralTreeCounts(PFactor):             # <<<<<<<<<<<<<<
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts {
  struct __pyx_obj_3ad3_6python_12factor_graph_PFactor __pyx_base;
};


/* "ad3/python/factor_graph.pyx":376
 * 
 * 
 * cdef class PFactorGraph:             # <<<<<<<<<<<<<<
 *     cdef FactorGraph *thisptr
 *     def __cinit__(self):
 */
struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph {
  PyObject_HEAD
  AD3::FactorGraph *thisptr;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'ad3.python.factor_graph' */
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PBinaryVariable = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PMultiVariable = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactor = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorSequence = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorSequenceCompressor = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorCompressionBudget = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorBinaryTree = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorGeneralTree = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts = 0;
static PyTypeObject *__pyx_ptype_3ad3_6python_12factor_graph_PFactorGraph = 0;
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "ad3.python.factor_graph"
int __pyx_module_is_main_ad3__python__factor_graph = 0;

/* Implementation of 'ad3.python.factor_graph' */
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_NotImplementedError;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_OR[] = "OR";
static const char __pyx_k_XOR[] = "XOR";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_pdb[] = "pdb";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_IMPLY[] = "IMPLY";
static const char __pyx_k_OROUT[] = "OROUT";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ANDOUT[] = "ANDOUT";
static const char __pyx_k_XOROUT[] = "XOROUT";
static const char __pyx_k_budget[] = "budget";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_length[] = "length";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_p_costs[] = "p_costs";
static const char __pyx_k_parents[] = "parents";
static const char __pyx_k_allocate[] = "allocate";
static const char __pyx_k_p_factor[] = "p_factor";
static const char __pyx_k_ATMOSTONE[] = "ATMOSTONE";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_p_negated[] = "p_negated";
static const char __pyx_k_num_states[] = "num_states";
static const char __pyx_k_factor_type[] = "factor_type";
static const char __pyx_k_p_variables[] = "p_variables";
static const char __pyx_k_max_num_bins[] = "max_num_bins";
static const char __pyx_k_set_allocate[] = "set_allocate";
static const char __pyx_k_log_potential[] = "log_potential";
static const char __pyx_k_left_positions[] = "left_positions";
static const char __pyx_k_owned_by_graph[] = "owned_by_graph";
static const char __pyx_k_right_positions[] = "right_positions";
static const char __pyx_k_bigram_positions[] = "bigram_positions";
static const char __pyx_k_p_multi_variables[] = "p_multi_variables";
static const char __pyx_k_phas_count_scores[] = "phas_count_scores";
static const char __pyx_k_edge_log_potential[] = "edge_log_potential";
static const char __pyx_k_pcounts_for_budget[] = "pcounts_for_budget";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Unknown_factor_type[] = "Unknown factor type:";
static const char __pyx_k_variable_log_potentials[] = "variable_log_potentials";
static const char __pyx_k_additional_log_potentials[] = "additional_log_potentials";
static const char __pyx_k_p_additional_log_potentials[] = "p_additional_log_potentials";
static PyObject *__pyx_n_s_ANDOUT;
static PyObject *__pyx_n_s_ATMOSTONE;
static PyObject *__pyx_n_s_IMPLY;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OR;
static PyObject *__pyx_n_s_OROUT;
static PyObject *__pyx_kp_s_Unknown_factor_type;
static PyObject *__pyx_n_s_XOR;
static PyObject *__pyx_n_s_XOROUT;
static PyObject *__pyx_n_s_additional_log_potentials;
static PyObject *__pyx_n_s_allocate;
static PyObject *__pyx_n_s_bigram_positions;
static PyObject *__pyx_n_s_budget;
static PyObject *__pyx_n_s_edge_log_potential;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_factor_type;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_left_positions;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_log_potential;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_num_bins;
static PyObject *__pyx_n_s_num_states;
static PyObject *__pyx_n_s_owned_by_graph;
static PyObject *__pyx_n_s_p_additional_log_potentials;
static PyObject *__pyx_n_s_p_costs;
static PyObject *__pyx_n_s_p_factor;
static PyObject *__pyx_n_s_p_multi_variables;
static PyObject *__pyx_n_s_p_negated;
static PyObject *__pyx_n_s_p_variables;
static PyObject *__pyx_n_s_parents;
static PyObject *__pyx_n_s_pcounts_for_budget;
static PyObject *__pyx_n_s_pdb;
static PyObject *__pyx_n_s_phas_count_scores;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_right_positions;
static PyObject *__pyx_n_s_set_allocate;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_variable_log_potentials;
static PyObject *__pyx_n_s_xrange;
static int __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_4get_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_6set_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self, double __pyx_v_log_potential); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_8get_id(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_10get_degree(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_4get_state(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_6get_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_8set_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i, double __pyx_v_log_potential); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_7PFactor___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_7PFactor_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_4set_allocate(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_6get_additional_log_potentials(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_8set_additional_log_potentials(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, std::vector<double>  __pyx_v_additional_log_potentials); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_10get_degree(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_12get_link_id(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_14get_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_16solve_map(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, std::vector<double>  __pyx_v_variable_log_potentials, std::vector<double>  __pyx_v_additional_log_potentials); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self, std::vector<int>  __pyx_v_num_states); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self, int __pyx_v_length, std::vector<int>  __pyx_v_left_positions, std::vector<int>  __pyx_v_right_positions); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self, int __pyx_v_length, int __pyx_v_budget, PyObject *__pyx_v_pcounts_for_budget, std::vector<int>  __pyx_v_bigram_positions); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self, std::vector<int>  __pyx_v_parents); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self, std::vector<int>  __pyx_v_parents, PyObject *__pyx_v_pcounts_for_budget, PyObject *__pyx_v_phas_count_scores, PyObject *__pyx_v_max_num_bins); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self, std::vector<int>  __pyx_v_parents, std::vector<int>  __pyx_v_num_states); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self, PyObject *__pyx_v_allocate); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self, std::vector<int>  __pyx_v_parents, std::vector<int>  __pyx_v_num_states); /* proto */
static int __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static void __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_4set_verbosity(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_verbosity); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_6create_binary_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_8create_multi_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_num_states); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_10create_factor_logic(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_factor_type, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_12create_factor_pair(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, double __pyx_v_edge_log_potential, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_14create_factor_budget(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, int __pyx_v_budget, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_16create_factor_knapsack(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, PyObject *__pyx_v_p_costs, double __pyx_v_budget, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_18create_factor_dense(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_multi_variables, PyObject *__pyx_v_p_additional_log_potentials, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_20declare_factor(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_factor, PyObject *__pyx_v_p_variables, bool __pyx_v_owned_by_graph); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_22fix_multi_variables_without_factors(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_24set_eta_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, double __pyx_v_eta); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_26set_max_iterations_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_max_iterations); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_28solve_lp_map_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_30set_eta_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, double __pyx_v_eta); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_32adapt_eta_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, bool __pyx_v_adapt); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_34set_max_iterations_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_max_iterations); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_36solve_lp_map_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_38solve_exact_map_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_40get_dual_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_42get_local_primal_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_44get_global_primal_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PBinaryVariable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PMultiVariable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequenceCompressor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorCompressionBudget(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTree(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_tuple_;

/* "ad3/python/factor_graph.pyx":149
 *     cdef BinaryVariable *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 149, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":150
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new BinaryVariable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":151
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new BinaryVariable()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 151, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":152
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new BinaryVariable()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->thisptr = new AD3::BinaryVariable();

    /* "ad3/python/factor_graph.pyx":151
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new BinaryVariable()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":149
 *     cdef BinaryVariable *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":154
 *             self.thisptr = new BinaryVariable()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":155
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":156
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def get_log_potential(self):
 */
    delete __pyx_v_self->thisptr;

    /* "ad3/python/factor_graph.pyx":155
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":154
 *             self.thisptr = new BinaryVariable()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":158
 *             del self.thisptr
 * 
 *     def get_log_potential(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLogPotential()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_5get_log_potential(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_5get_log_potential(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_log_potential (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_4get_log_potential(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_4get_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_log_potential", 0);

  /* "ad3/python/factor_graph.pyx":159
 * 
 *     def get_log_potential(self):
 *         return self.thisptr.GetLogPotential()             # <<<<<<<<<<<<<<
 * 
 *     def set_log_potential(self, double log_potential):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetLogPotential()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":158
 *             del self.thisptr
 * 
 *     def get_log_potential(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLogPotential()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.get_log_potential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":161
 *         return self.thisptr.GetLogPotential()
 * 
 *     def set_log_potential(self, double log_potential):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetLogPotential(log_potential)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_7set_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_arg_log_potential); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_7set_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_arg_log_potential) {
  double __pyx_v_log_potential;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_log_potential (wrapper)", 0);
  assert(__pyx_arg_log_potential); {
    __pyx_v_log_potential = __pyx_PyFloat_AsDouble(__pyx_arg_log_potential); if (unlikely((__pyx_v_log_potential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 161, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.set_log_potential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_6set_log_potential(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self), ((double)__pyx_v_log_potential));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_6set_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self, double __pyx_v_log_potential) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_log_potential", 0);

  /* "ad3/python/factor_graph.pyx":162
 * 
 *     def set_log_potential(self, double log_potential):
 *         self.thisptr.SetLogPotential(log_potential)             # <<<<<<<<<<<<<<
 * 
 *     def get_id(self):
 */
  __pyx_v_self->thisptr->SetLogPotential(__pyx_v_log_potential);

  /* "ad3/python/factor_graph.pyx":161
 *         return self.thisptr.GetLogPotential()
 * 
 *     def set_log_potential(self, double log_potential):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetLogPotential(log_potential)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":164
 *         self.thisptr.SetLogPotential(log_potential)
 * 
 *     def get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetId()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_9get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_9get_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_id (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_8get_id(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_8get_id(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_id", 0);

  /* "ad3/python/factor_graph.pyx":165
 * 
 *     def get_id(self):
 *         return self.thisptr.GetId()             # <<<<<<<<<<<<<<
 * 
 *     def get_degree(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetId()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":164
 *         self.thisptr.SetLogPotential(log_potential)
 * 
 *     def get_id(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetId()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.get_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":167
 *         return self.thisptr.GetId()
 * 
 *     def get_degree(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Degree()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_11get_degree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_11get_degree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_degree (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_10get_degree(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PBinaryVariable_10get_degree(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_degree", 0);

  /* "ad3/python/factor_graph.pyx":168
 * 
 *     def get_degree(self):
 *         return self.thisptr.Degree()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Degree()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":167
 *         return self.thisptr.GetId()
 * 
 *     def get_degree(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Degree()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PBinaryVariable.get_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":174
 *     cdef MultiVariable *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 174, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  AD3::MultiVariable *__pyx_t_3;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":175
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *             self.thisptr = new MultiVariable()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":176
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new MultiVariable()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 176, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":177
 *         self.allocate = allocate
 *         if allocate:
 *             self.thisptr = new MultiVariable()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    try {
      __pyx_t_3 = new AD3::MultiVariable();
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 177, __pyx_L1_error)
    }
    __pyx_v_self->thisptr = __pyx_t_3;

    /* "ad3/python/factor_graph.pyx":176
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *             self.thisptr = new MultiVariable()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":174
 *     cdef MultiVariable *thisptr
 *     cdef bool allocate
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":179
 *             self.thisptr = new MultiVariable()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":180
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":181
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def get_state(self, int i):
 */
    delete __pyx_v_self->thisptr;

    /* "ad3/python/factor_graph.pyx":180
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":179
 *             self.thisptr = new MultiVariable()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":183
 *             del self.thisptr
 * 
 *     def get_state(self, int i):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable *variable = self.thisptr.GetState(i)
 *         pvariable = PBinaryVariable(allocate=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_5get_state(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_5get_state(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_state (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 183, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.get_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_4get_state(((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_4get_state(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i) {
  AD3::BinaryVariable *__pyx_v_variable;
  struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_pvariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_state", 0);

  /* "ad3/python/factor_graph.pyx":184
 * 
 *     def get_state(self, int i):
 *         cdef BinaryVariable *variable = self.thisptr.GetState(i)             # <<<<<<<<<<<<<<
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 */
  __pyx_v_variable = __pyx_v_self->thisptr->GetState(__pyx_v_i);

  /* "ad3/python/factor_graph.pyx":185
 *     def get_state(self, int i):
 *         cdef BinaryVariable *variable = self.thisptr.GetState(i)
 *         pvariable = PBinaryVariable(allocate=False)             # <<<<<<<<<<<<<<
 *         pvariable.thisptr = variable
 *         return pvariable
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(0, 185, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ad3_6python_12factor_graph_PBinaryVariable), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pvariable = ((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":186
 *         cdef BinaryVariable *variable = self.thisptr.GetState(i)
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable             # <<<<<<<<<<<<<<
 *         return pvariable
 * 
 */
  __pyx_v_pvariable->thisptr = __pyx_v_variable;

  /* "ad3/python/factor_graph.pyx":187
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 *         return pvariable             # <<<<<<<<<<<<<<
 * 
 *     def get_log_potential(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pvariable));
  __pyx_r = ((PyObject *)__pyx_v_pvariable);
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":183
 *             del self.thisptr
 * 
 *     def get_state(self, int i):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable *variable = self.thisptr.GetState(i)
 *         pvariable = PBinaryVariable(allocate=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.get_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pvariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":189
 *         return pvariable
 * 
 *     def get_log_potential(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLogPotential(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_7get_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_7get_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_log_potential (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 189, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.get_log_potential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_6get_log_potential(((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_6get_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_log_potential", 0);

  /* "ad3/python/factor_graph.pyx":190
 * 
 *     def get_log_potential(self, int i):
 *         return self.thisptr.GetLogPotential(i)             # <<<<<<<<<<<<<<
 * 
 *     def set_log_potential(self, int i, double log_potential):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetLogPotential(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":189
 *         return pvariable
 * 
 *     def get_log_potential(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLogPotential(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.get_log_potential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":192
 *         return self.thisptr.GetLogPotential(i)
 * 
 *     def set_log_potential(self, int i, double log_potential):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetLogPotential(i, log_potential)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_9set_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_9set_log_potential(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_i;
  double __pyx_v_log_potential;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_log_potential (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_log_potential,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_log_potential)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("set_log_potential", 1, 2, 2, 1); __PYX_ERR(0, 192, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_log_potential") < 0)) __PYX_ERR(0, 192, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
    __pyx_v_log_potential = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_log_potential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 192, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_log_potential", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 192, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PMultiVariable.set_log_potential", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_8set_log_potential(((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_v_self), __pyx_v_i, __pyx_v_log_potential);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_14PMultiVariable_8set_log_potential(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_self, int __pyx_v_i, double __pyx_v_log_potential) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_log_potential", 0);

  /* "ad3/python/factor_graph.pyx":193
 * 
 *     def set_log_potential(self, int i, double log_potential):
 *         self.thisptr.SetLogPotential(i, log_potential)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->SetLogPotential(__pyx_v_i, __pyx_v_log_potential);

  /* "ad3/python/factor_graph.pyx":192
 *         return self.thisptr.GetLogPotential(i)
 * 
 *     def set_log_potential(self, int i, double log_potential):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetLogPotential(i, log_potential)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":200
 *     cdef bool allocate
 *     # This is a virtual class, so don't allocate/deallocate.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.allocate = False
 *         pass
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_7PFactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_7PFactor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_7PFactor___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":201
 *     # This is a virtual class, so don't allocate/deallocate.
 *     def __cinit__(self):
 *         self.allocate = False             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
  __pyx_v_self->allocate = 0;

  /* "ad3/python/factor_graph.pyx":200
 *     cdef bool allocate
 *     # This is a virtual class, so don't allocate/deallocate.
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.allocate = False
 *         pass
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":204
 *         pass
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_7PFactor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_7PFactor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_7PFactor_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_7PFactor_2__dealloc__(CYTHON_UNUSED struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":207
 *         pass
 * 
 *     def set_allocate(self, allocate):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_5set_allocate(PyObject *__pyx_v_self, PyObject *__pyx_v_allocate); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_5set_allocate(PyObject *__pyx_v_self, PyObject *__pyx_v_allocate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_allocate (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_4set_allocate(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self), ((PyObject *)__pyx_v_allocate));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_4set_allocate(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, PyObject *__pyx_v_allocate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  __Pyx_RefNannySetupContext("set_allocate", 0);

  /* "ad3/python/factor_graph.pyx":208
 * 
 *     def set_allocate(self, allocate):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 * 
 *     def get_additional_log_potentials(self):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 208, __pyx_L1_error)
  __pyx_v_self->allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":207
 *         pass
 * 
 *     def set_allocate(self, allocate):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.set_allocate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":210
 *         self.allocate = allocate
 * 
 *     def get_additional_log_potentials(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] additional_log_potentials
 *         additional_log_potentials = self.thisptr.GetAdditionalLogPotentials()
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_7get_additional_log_potentials(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_7get_additional_log_potentials(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_additional_log_potentials (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_6get_additional_log_potentials(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_6get_additional_log_potentials(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self) {
  std::vector<double>  __pyx_v_additional_log_potentials;
  PyObject *__pyx_v_p_additional_log_potentials = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_additional_log_potentials", 0);

  /* "ad3/python/factor_graph.pyx":212
 *     def get_additional_log_potentials(self):
 *         cdef vector[double] additional_log_potentials
 *         additional_log_potentials = self.thisptr.GetAdditionalLogPotentials()             # <<<<<<<<<<<<<<
 *         p_additional_log_potentials = []
 *         cdef size_t i
 */
  __pyx_v_additional_log_potentials = __pyx_v_self->thisptr->GetAdditionalLogPotentials();

  /* "ad3/python/factor_graph.pyx":213
 *         cdef vector[double] additional_log_potentials
 *         additional_log_potentials = self.thisptr.GetAdditionalLogPotentials()
 *         p_additional_log_potentials = []             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in xrange(additional_log_potentials.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p_additional_log_potentials = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":215
 *         p_additional_log_potentials = []
 *         cdef size_t i
 *         for i in xrange(additional_log_potentials.size()):             # <<<<<<<<<<<<<<
 *             p_additional_log_potentials.append(additional_log_potentials[i])
 *         return p_additional_log_potentials
 */
  __pyx_t_2 = __pyx_v_additional_log_potentials.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ad3/python/factor_graph.pyx":216
 *         cdef size_t i
 *         for i in xrange(additional_log_potentials.size()):
 *             p_additional_log_potentials.append(additional_log_potentials[i])             # <<<<<<<<<<<<<<
 *         return p_additional_log_potentials
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_additional_log_potentials[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_p_additional_log_potentials, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 216, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "ad3/python/factor_graph.pyx":217
 *         for i in xrange(additional_log_potentials.size()):
 *             p_additional_log_potentials.append(additional_log_potentials[i])
 *         return p_additional_log_potentials             # <<<<<<<<<<<<<<
 * 
 *     def set_additional_log_potentials(self, vector[double] additional_log_potentials):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p_additional_log_potentials);
  __pyx_r = __pyx_v_p_additional_log_potentials;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":210
 *         self.allocate = allocate
 * 
 *     def get_additional_log_potentials(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] additional_log_potentials
 *         additional_log_potentials = self.thisptr.GetAdditionalLogPotentials()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_additional_log_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_additional_log_potentials);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":219
 *         return p_additional_log_potentials
 * 
 *     def set_additional_log_potentials(self, vector[double] additional_log_potentials):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetAdditionalLogPotentials(additional_log_potentials)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_9set_additional_log_potentials(PyObject *__pyx_v_self, PyObject *__pyx_arg_additional_log_potentials); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_9set_additional_log_potentials(PyObject *__pyx_v_self, PyObject *__pyx_arg_additional_log_potentials) {
  std::vector<double>  __pyx_v_additional_log_potentials;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_additional_log_potentials (wrapper)", 0);
  assert(__pyx_arg_additional_log_potentials); {
    __pyx_v_additional_log_potentials = __pyx_convert_vector_from_py_double(__pyx_arg_additional_log_potentials); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 219, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.set_additional_log_potentials", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_8set_additional_log_potentials(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self), ((std::vector<double> )__pyx_v_additional_log_potentials));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_8set_additional_log_potentials(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, std::vector<double>  __pyx_v_additional_log_potentials) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_additional_log_potentials", 0);

  /* "ad3/python/factor_graph.pyx":220
 * 
 *     def set_additional_log_potentials(self, vector[double] additional_log_potentials):
 *         self.thisptr.SetAdditionalLogPotentials(additional_log_potentials)             # <<<<<<<<<<<<<<
 * 
 *     def get_degree(self):
 */
  __pyx_v_self->thisptr->SetAdditionalLogPotentials(__pyx_v_additional_log_potentials);

  /* "ad3/python/factor_graph.pyx":219
 *         return p_additional_log_potentials
 * 
 *     def set_additional_log_potentials(self, vector[double] additional_log_potentials):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetAdditionalLogPotentials(additional_log_potentials)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":222
 *         self.thisptr.SetAdditionalLogPotentials(additional_log_potentials)
 * 
 *     def get_degree(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Degree()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_11get_degree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_11get_degree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_degree (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_10get_degree(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_10get_degree(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_degree", 0);

  /* "ad3/python/factor_graph.pyx":223
 * 
 *     def get_degree(self):
 *         return self.thisptr.Degree()             # <<<<<<<<<<<<<<
 * 
 *     def get_link_id(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Degree()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":222
 *         self.thisptr.SetAdditionalLogPotentials(additional_log_potentials)
 * 
 *     def get_degree(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Degree()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_degree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":225
 *         return self.thisptr.Degree()
 * 
 *     def get_link_id(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLinkId(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_13get_link_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_13get_link_id(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_link_id (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 225, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_link_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_12get_link_id(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_12get_link_id(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_link_id", 0);

  /* "ad3/python/factor_graph.pyx":226
 * 
 *     def get_link_id(self, int i):
 *         return self.thisptr.GetLinkId(i)             # <<<<<<<<<<<<<<
 * 
 *     def get_variable(self, int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetLinkId(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":225
 *         return self.thisptr.Degree()
 * 
 *     def get_link_id(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLinkId(i)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_link_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":228
 *         return self.thisptr.GetLinkId(i)
 * 
 *     def get_variable(self, int i):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable *variable = self.thisptr.GetVariable(i)
 *         pvariable = PBinaryVariable(allocate=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_15get_variable(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_15get_variable(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_variable (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 228, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_14get_variable(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_14get_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, int __pyx_v_i) {
  AD3::BinaryVariable *__pyx_v_variable;
  struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_pvariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_variable", 0);

  /* "ad3/python/factor_graph.pyx":229
 * 
 *     def get_variable(self, int i):
 *         cdef BinaryVariable *variable = self.thisptr.GetVariable(i)             # <<<<<<<<<<<<<<
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 */
  __pyx_v_variable = __pyx_v_self->thisptr->GetVariable(__pyx_v_i);

  /* "ad3/python/factor_graph.pyx":230
 *     def get_variable(self, int i):
 *         cdef BinaryVariable *variable = self.thisptr.GetVariable(i)
 *         pvariable = PBinaryVariable(allocate=False)             # <<<<<<<<<<<<<<
 *         pvariable.thisptr = variable
 *         return pvariable
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(0, 230, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ad3_6python_12factor_graph_PBinaryVariable), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pvariable = ((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":231
 *         cdef BinaryVariable *variable = self.thisptr.GetVariable(i)
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable             # <<<<<<<<<<<<<<
 *         return pvariable
 * 
 */
  __pyx_v_pvariable->thisptr = __pyx_v_variable;

  /* "ad3/python/factor_graph.pyx":232
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 *         return pvariable             # <<<<<<<<<<<<<<
 * 
 *     def solve_map(self, vector[double] variable_log_potentials,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pvariable));
  __pyx_r = ((PyObject *)__pyx_v_pvariable);
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":228
 *         return self.thisptr.GetLinkId(i)
 * 
 *     def get_variable(self, int i):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable *variable = self.thisptr.GetVariable(i)
 *         pvariable = PBinaryVariable(allocate=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.get_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pvariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":234
 *         return pvariable
 * 
 *     def solve_map(self, vector[double] variable_log_potentials,             # <<<<<<<<<<<<<<
 *                   vector[double] additional_log_potentials):
 *         cdef vector[double] posteriors
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_17solve_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_7PFactor_17solve_map(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<double>  __pyx_v_variable_log_potentials;
  std::vector<double>  __pyx_v_additional_log_potentials;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_map (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_variable_log_potentials,&__pyx_n_s_additional_log_potentials,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_variable_log_potentials)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_additional_log_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("solve_map", 1, 2, 2, 1); __PYX_ERR(0, 234, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "solve_map") < 0)) __PYX_ERR(0, 234, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_variable_log_potentials = __pyx_convert_vector_from_py_double(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L3_error)
    __pyx_v_additional_log_potentials = __pyx_convert_vector_from_py_double(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("solve_map", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 234, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.solve_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_7PFactor_16solve_map(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_self), __pyx_v_variable_log_potentials, __pyx_v_additional_log_potentials);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_7PFactor_16solve_map(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *__pyx_v_self, std::vector<double>  __pyx_v_variable_log_potentials, std::vector<double>  __pyx_v_additional_log_potentials) {
  std::vector<double>  __pyx_v_posteriors;
  std::vector<double>  __pyx_v_additional_posteriors;
  double __pyx_v_value;
  PyObject *__pyx_v_p_posteriors = NULL;
  PyObject *__pyx_v_p_additional_posteriors = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("solve_map", 0);

  /* "ad3/python/factor_graph.pyx":239
 *         cdef vector[double] additional_posteriors
 *         cdef double value
 *         self.thisptr.SolveMAP(variable_log_potentials, additional_log_potentials,             # <<<<<<<<<<<<<<
 *                               &posteriors, &additional_posteriors,
 *                               &value)
 */
  __pyx_v_self->thisptr->SolveMAP(__pyx_v_variable_log_potentials, __pyx_v_additional_log_potentials, (&__pyx_v_posteriors), (&__pyx_v_additional_posteriors), (&__pyx_v_value));

  /* "ad3/python/factor_graph.pyx":242
 *                               &posteriors, &additional_posteriors,
 *                               &value)
 *         p_posteriors, p_additional_posteriors = [], []             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_p_posteriors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_p_additional_posteriors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":244
 *         p_posteriors, p_additional_posteriors = [], []
 *         cdef size_t i
 *         for i in range(posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 */
  __pyx_t_3 = __pyx_v_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":245
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])             # <<<<<<<<<<<<<<
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":246
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 */
  __pyx_t_3 = __pyx_v_additional_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":247
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])             # <<<<<<<<<<<<<<
 * 
 *         return value, p_posteriors, p_additional_posteriors
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_additional_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_additional_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 247, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":249
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 *         return value, p_posteriors, p_additional_posteriors             # <<<<<<<<<<<<<<
 * 
 * cdef class PFactorSequence(PFactor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_p_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_p_posteriors);
  __Pyx_INCREF(__pyx_v_p_additional_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_additional_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_p_additional_posteriors);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":234
 *         return pvariable
 * 
 *     def solve_map(self, vector[double] variable_log_potentials,             # <<<<<<<<<<<<<<
 *                   vector[double] additional_log_potentials):
 *         cdef vector[double] posteriors
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactor.solve_map", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_posteriors);
  __Pyx_XDECREF(__pyx_v_p_additional_posteriors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":252
 * 
 * cdef class PFactorSequence(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 252, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":253
 * cdef class PFactorSequence(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorSequence()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":254
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorSequence()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 254, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":255
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorSequence()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorSequence();

    /* "ad3/python/factor_graph.pyx":254
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorSequence()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":252
 * 
 * cdef class PFactorSequence(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequence.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":257
 *            self.thisptr = new FactorSequence()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":258
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":259
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[int] num_states):
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":258
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":257
 *            self.thisptr = new FactorSequence()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":261
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorSequence*>self.thisptr).Initialize(num_states)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_arg_num_states); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_arg_num_states) {
  std::vector<int>  __pyx_v_num_states;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  assert(__pyx_arg_num_states); {
    __pyx_v_num_states = __pyx_convert_vector_from_py_int(__pyx_arg_num_states); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequence.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *)__pyx_v_self), ((std::vector<int> )__pyx_v_num_states));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_15PFactorSequence_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence *__pyx_v_self, std::vector<int>  __pyx_v_num_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":262
 * 
 *     def initialize(self, vector[int] num_states):
 *         (<FactorSequence*>self.thisptr).Initialize(num_states)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorSequence *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_num_states);

  /* "ad3/python/factor_graph.pyx":261
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorSequence*>self.thisptr).Initialize(num_states)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":266
 * 
 * cdef class PFactorSequenceCompressor(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 266, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequenceCompressor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":267
 * cdef class PFactorSequenceCompressor(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorSequenceCompressor()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 267, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":268
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorSequenceCompressor()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 268, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":269
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorSequenceCompressor()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorSequenceCompressor();

    /* "ad3/python/factor_graph.pyx":268
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorSequenceCompressor()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":266
 * 
 * cdef class PFactorSequenceCompressor(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequenceCompressor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":271
 *            self.thisptr = new FactorSequenceCompressor()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":272
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":273
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, int length, vector[int] left_positions, vector[int] right_positions):
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":272
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":271
 *            self.thisptr = new FactorSequenceCompressor()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":275
 *             del self.thisptr
 * 
 *     def initialize(self, int length, vector[int] left_positions, vector[int] right_positions):             # <<<<<<<<<<<<<<
 *         (<FactorSequenceCompressor*>self.thisptr).Initialize(length, left_positions, right_positions)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_length;
  std::vector<int>  __pyx_v_left_positions;
  std::vector<int>  __pyx_v_right_positions;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,&__pyx_n_s_left_positions,&__pyx_n_s_right_positions,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 1); __PYX_ERR(0, 275, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_right_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, 2); __PYX_ERR(0, 275, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 275, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_length = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
    __pyx_v_left_positions = __pyx_convert_vector_from_py_int(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
    __pyx_v_right_positions = __pyx_convert_vector_from_py_int(values[2]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 275, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 275, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorSequenceCompressor.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *)__pyx_v_self), __pyx_v_length, __pyx_v_left_positions, __pyx_v_right_positions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor *__pyx_v_self, int __pyx_v_length, std::vector<int>  __pyx_v_left_positions, std::vector<int>  __pyx_v_right_positions) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":276
 * 
 *     def initialize(self, int length, vector[int] left_positions, vector[int] right_positions):
 *         (<FactorSequenceCompressor*>self.thisptr).Initialize(length, left_positions, right_positions)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorSequenceCompressor *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_length, __pyx_v_left_positions, __pyx_v_right_positions);

  /* "ad3/python/factor_graph.pyx":275
 *             del self.thisptr
 * 
 *     def initialize(self, int length, vector[int] left_positions, vector[int] right_positions):             # <<<<<<<<<<<<<<
 *         (<FactorSequenceCompressor*>self.thisptr).Initialize(length, left_positions, right_positions)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":280
 * 
 * cdef class PFactorCompressionBudget(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 280, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 280, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorCompressionBudget.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":281
 * cdef class PFactorCompressionBudget(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorCompressionBudget()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":282
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorCompressionBudget()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 282, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":283
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorCompressionBudget()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorCompressionBudget();

    /* "ad3/python/factor_graph.pyx":282
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorCompressionBudget()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":280
 * 
 * cdef class PFactorCompressionBudget(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorCompressionBudget.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":285
 *            self.thisptr = new FactorCompressionBudget()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":286
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":287
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, int length, int budget,
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":286
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":285
 *            self.thisptr = new FactorCompressionBudget()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":289
 *             del self.thisptr
 * 
 *     def initialize(self, int length, int budget,             # <<<<<<<<<<<<<<
 *                    pcounts_for_budget,
 *                    vector[int] bigram_positions):
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_length;
  int __pyx_v_budget;
  PyObject *__pyx_v_pcounts_for_budget = 0;
  std::vector<int>  __pyx_v_bigram_positions;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_length,&__pyx_n_s_budget,&__pyx_n_s_pcounts_for_budget,&__pyx_n_s_bigram_positions,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_length)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_budget)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 1); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pcounts_for_budget)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 2); __PYX_ERR(0, 289, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_bigram_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, 3); __PYX_ERR(0, 289, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 289, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_length = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_length == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
    __pyx_v_budget = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_budget == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L3_error)
    __pyx_v_pcounts_for_budget = values[2];
    __pyx_v_bigram_positions = __pyx_convert_vector_from_py_int(values[3]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 289, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorCompressionBudget.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *)__pyx_v_self), __pyx_v_length, __pyx_v_budget, __pyx_v_pcounts_for_budget, __pyx_v_bigram_positions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_24PFactorCompressionBudget_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget *__pyx_v_self, int __pyx_v_length, int __pyx_v_budget, PyObject *__pyx_v_pcounts_for_budget, std::vector<int>  __pyx_v_bigram_positions) {
  std::vector<bool>  __pyx_v_counts_for_budget;
  PyObject *__pyx_v_counts = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":293
 *                    vector[int] bigram_positions):
 *         cdef vector[bool] counts_for_budget
 *         for counts in pcounts_for_budget:             # <<<<<<<<<<<<<<
 *             counts_for_budget.push_back(counts)
 *         (<FactorCompressionBudget*>self.thisptr).Initialize(length, budget, counts_for_budget, bigram_positions)
 */
  if (likely(PyList_CheckExact(__pyx_v_pcounts_for_budget)) || PyTuple_CheckExact(__pyx_v_pcounts_for_budget)) {
    __pyx_t_1 = __pyx_v_pcounts_for_budget; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pcounts_for_budget); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 293, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 293, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 293, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_counts, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":294
 *         cdef vector[bool] counts_for_budget
 *         for counts in pcounts_for_budget:
 *             counts_for_budget.push_back(counts)             # <<<<<<<<<<<<<<
 *         (<FactorCompressionBudget*>self.thisptr).Initialize(length, budget, counts_for_budget, bigram_positions)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_counts); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    try {
      __pyx_v_counts_for_budget.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 294, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":293
 *                    vector[int] bigram_positions):
 *         cdef vector[bool] counts_for_budget
 *         for counts in pcounts_for_budget:             # <<<<<<<<<<<<<<
 *             counts_for_budget.push_back(counts)
 *         (<FactorCompressionBudget*>self.thisptr).Initialize(length, budget, counts_for_budget, bigram_positions)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":295
 *         for counts in pcounts_for_budget:
 *             counts_for_budget.push_back(counts)
 *         (<FactorCompressionBudget*>self.thisptr).Initialize(length, budget, counts_for_budget, bigram_positions)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorCompressionBudget *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_length, __pyx_v_budget, __pyx_v_counts_for_budget, __pyx_v_bigram_positions);

  /* "ad3/python/factor_graph.pyx":289
 *             del self.thisptr
 * 
 *     def initialize(self, int length, int budget,             # <<<<<<<<<<<<<<
 *                    pcounts_for_budget,
 *                    vector[int] bigram_positions):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorCompressionBudget.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_counts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":299
 * 
 * cdef class PFactorBinaryTree(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 299, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":300
 * cdef class PFactorBinaryTree(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorBinaryTree()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":301
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorBinaryTree()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 301, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":302
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorBinaryTree()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorBinaryTree();

    /* "ad3/python/factor_graph.pyx":301
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorBinaryTree()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":299
 * 
 * cdef class PFactorBinaryTree(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":304
 *            self.thisptr = new FactorBinaryTree()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":305
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":306
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[int] parents):
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":305
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":304
 *            self.thisptr = new FactorBinaryTree()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":308
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents):             # <<<<<<<<<<<<<<
 *         (<FactorBinaryTree*>self.thisptr).Initialize(parents)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_arg_parents); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_arg_parents) {
  std::vector<int>  __pyx_v_parents;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  assert(__pyx_arg_parents); {
    __pyx_v_parents = __pyx_convert_vector_from_py_int(__pyx_arg_parents); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 308, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTree.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *)__pyx_v_self), ((std::vector<int> )__pyx_v_parents));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_17PFactorBinaryTree_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree *__pyx_v_self, std::vector<int>  __pyx_v_parents) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":309
 * 
 *     def initialize(self, vector[int] parents):
 *         (<FactorBinaryTree*>self.thisptr).Initialize(parents)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorBinaryTree *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents);

  /* "ad3/python/factor_graph.pyx":308
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents):             # <<<<<<<<<<<<<<
 *         (<FactorBinaryTree*>self.thisptr).Initialize(parents)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":313
 * 
 * cdef class PFactorBinaryTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 313, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTreeCounts.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":314
 * cdef class PFactorBinaryTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorBinaryTreeCounts()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":315
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorBinaryTreeCounts()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 315, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":316
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorBinaryTreeCounts()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorBinaryTreeCounts();

    /* "ad3/python/factor_graph.pyx":315
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorBinaryTreeCounts()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":313
 * 
 * cdef class PFactorBinaryTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTreeCounts.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":318
 *            self.thisptr = new FactorBinaryTreeCounts()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":319
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":320
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[int] parents,
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":319
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":318
 *            self.thisptr = new FactorBinaryTreeCounts()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":322
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents,             # <<<<<<<<<<<<<<
 *                    pcounts_for_budget,
 *                    phas_count_scores=None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<int>  __pyx_v_parents;
  PyObject *__pyx_v_pcounts_for_budget = 0;
  PyObject *__pyx_v_phas_count_scores = 0;
  PyObject *__pyx_v_max_num_bins = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parents,&__pyx_n_s_pcounts_for_budget,&__pyx_n_s_phas_count_scores,&__pyx_n_s_max_num_bins,0};
    PyObject* values[4] = {0,0,0,0};

    /* "ad3/python/factor_graph.pyx":324
 *     def initialize(self, vector[int] parents,
 *                    pcounts_for_budget,
 *                    phas_count_scores=None,             # <<<<<<<<<<<<<<
 *                    max_num_bins=None):
 *         cdef vector[bool] counts_for_budget
 */
    values[2] = ((PyObject *)Py_None);

    /* "ad3/python/factor_graph.pyx":325
 *                    pcounts_for_budget,
 *                    phas_count_scores=None,
 *                    max_num_bins=None):             # <<<<<<<<<<<<<<
 *         cdef vector[bool] counts_for_budget
 *         cdef vector[bool] has_count_scores
 */
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pcounts_for_budget)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 0, 2, 4, 1); __PYX_ERR(0, 322, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_phas_count_scores);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_num_bins);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 322, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_parents = __pyx_convert_vector_from_py_int(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 322, __pyx_L3_error)
    __pyx_v_pcounts_for_budget = values[1];
    __pyx_v_phas_count_scores = values[2];
    __pyx_v_max_num_bins = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 322, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTreeCounts.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *)__pyx_v_self), __pyx_v_parents, __pyx_v_pcounts_for_budget, __pyx_v_phas_count_scores, __pyx_v_max_num_bins);

  /* "ad3/python/factor_graph.pyx":322
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents,             # <<<<<<<<<<<<<<
 *                    pcounts_for_budget,
 *                    phas_count_scores=None,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts *__pyx_v_self, std::vector<int>  __pyx_v_parents, PyObject *__pyx_v_pcounts_for_budget, PyObject *__pyx_v_phas_count_scores, PyObject *__pyx_v_max_num_bins) {
  std::vector<bool>  __pyx_v_counts_for_budget;
  std::vector<bool>  __pyx_v_has_count_scores;
  PyObject *__pyx_v_counts = NULL;
  PyObject *__pyx_v_has_count = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":328
 *         cdef vector[bool] counts_for_budget
 *         cdef vector[bool] has_count_scores
 *         for counts in pcounts_for_budget:             # <<<<<<<<<<<<<<
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:
 */
  if (likely(PyList_CheckExact(__pyx_v_pcounts_for_budget)) || PyTuple_CheckExact(__pyx_v_pcounts_for_budget)) {
    __pyx_t_1 = __pyx_v_pcounts_for_budget; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_pcounts_for_budget); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 328, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 328, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 328, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_counts, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":329
 *         cdef vector[bool] has_count_scores
 *         for counts in pcounts_for_budget:
 *             counts_for_budget.push_back(counts)             # <<<<<<<<<<<<<<
 *         if phas_count_scores is not None:
 *             for has_count in phas_count_scores:
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_counts); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 329, __pyx_L1_error)
    try {
      __pyx_v_counts_for_budget.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 329, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":328
 *         cdef vector[bool] counts_for_budget
 *         cdef vector[bool] has_count_scores
 *         for counts in pcounts_for_budget:             # <<<<<<<<<<<<<<
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":330
 *         for counts in pcounts_for_budget:
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:             # <<<<<<<<<<<<<<
 *             for has_count in phas_count_scores:
 *                 has_count_scores.push_back(has_count)
 */
  __pyx_t_6 = (__pyx_v_phas_count_scores != Py_None);
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":331
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:
 *             for has_count in phas_count_scores:             # <<<<<<<<<<<<<<
 *                 has_count_scores.push_back(has_count)
 *             if max_num_bins is not None:
 */
    if (likely(PyList_CheckExact(__pyx_v_phas_count_scores)) || PyTuple_CheckExact(__pyx_v_phas_count_scores)) {
      __pyx_t_1 = __pyx_v_phas_count_scores; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
      __pyx_t_3 = NULL;
    } else {
      __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_phas_count_scores); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_3)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 331, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_3(__pyx_t_1);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 331, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_has_count, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "ad3/python/factor_graph.pyx":332
 *         if phas_count_scores is not None:
 *             for has_count in phas_count_scores:
 *                 has_count_scores.push_back(has_count)             # <<<<<<<<<<<<<<
 *             if max_num_bins is not None:
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 */
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_has_count); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 332, __pyx_L1_error)
      try {
        __pyx_v_has_count_scores.push_back(__pyx_t_5);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 332, __pyx_L1_error)
      }

      /* "ad3/python/factor_graph.pyx":331
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:
 *             for has_count in phas_count_scores:             # <<<<<<<<<<<<<<
 *                 has_count_scores.push_back(has_count)
 *             if max_num_bins is not None:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ad3/python/factor_graph.pyx":333
 *             for has_count in phas_count_scores:
 *                 has_count_scores.push_back(has_count)
 *             if max_num_bins is not None:             # <<<<<<<<<<<<<<
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 *                                                                    counts_for_budget,
 */
    __pyx_t_7 = (__pyx_v_max_num_bins != Py_None);
    __pyx_t_6 = (__pyx_t_7 != 0);
    if (__pyx_t_6) {

      /* "ad3/python/factor_graph.pyx":337
 *                                                                    counts_for_budget,
 *                                                                    has_count_scores,
 *                                                                    max_num_bins)             # <<<<<<<<<<<<<<
 *             else:
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 */
      __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_max_num_bins); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 337, __pyx_L1_error)

      /* "ad3/python/factor_graph.pyx":334
 *                 has_count_scores.push_back(has_count)
 *             if max_num_bins is not None:
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,             # <<<<<<<<<<<<<<
 *                                                                    counts_for_budget,
 *                                                                    has_count_scores,
 */
      ((AD3::FactorBinaryTreeCounts *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents, __pyx_v_counts_for_budget, __pyx_v_has_count_scores, __pyx_t_8);

      /* "ad3/python/factor_graph.pyx":333
 *             for has_count in phas_count_scores:
 *                 has_count_scores.push_back(has_count)
 *             if max_num_bins is not None:             # <<<<<<<<<<<<<<
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 *                                                                    counts_for_budget,
 */
      goto __pyx_L8;
    }

    /* "ad3/python/factor_graph.pyx":339
 *                                                                    max_num_bins)
 *             else:
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,             # <<<<<<<<<<<<<<
 *                                                                    counts_for_budget,
 *                                                                    has_count_scores)
 */
    /*else*/ {

      /* "ad3/python/factor_graph.pyx":341
 *                 (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 *                                                                    counts_for_budget,
 *                                                                    has_count_scores)             # <<<<<<<<<<<<<<
 *         else:
 *             (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 */
      ((AD3::FactorBinaryTreeCounts *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents, __pyx_v_counts_for_budget, __pyx_v_has_count_scores);
    }
    __pyx_L8:;

    /* "ad3/python/factor_graph.pyx":330
 *         for counts in pcounts_for_budget:
 *             counts_for_budget.push_back(counts)
 *         if phas_count_scores is not None:             # <<<<<<<<<<<<<<
 *             for has_count in phas_count_scores:
 *                 has_count_scores.push_back(has_count)
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":343
 *                                                                    has_count_scores)
 *         else:
 *             (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,             # <<<<<<<<<<<<<<
 *                                                                counts_for_budget)
 * 
 */
  /*else*/ {

    /* "ad3/python/factor_graph.pyx":344
 *         else:
 *             (<FactorBinaryTreeCounts*>self.thisptr).Initialize(parents,
 *                                                                counts_for_budget)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((AD3::FactorBinaryTreeCounts *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents, __pyx_v_counts_for_budget);
  }
  __pyx_L5:;

  /* "ad3/python/factor_graph.pyx":322
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents,             # <<<<<<<<<<<<<<
 *                    pcounts_for_budget,
 *                    phas_count_scores=None,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorBinaryTreeCounts.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_counts);
  __Pyx_XDECREF(__pyx_v_has_count);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":349
 * 
 * cdef class PFactorGeneralTree(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 349, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 349, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":350
 * cdef class PFactorGeneralTree(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorGeneralTree()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 350, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":351
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorGeneralTree()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 351, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":352
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorGeneralTree()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorGeneralTree();

    /* "ad3/python/factor_graph.pyx":351
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorGeneralTree()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":349
 * 
 * cdef class PFactorGeneralTree(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTree.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":354
 *            self.thisptr = new FactorGeneralTree()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":355
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":356
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":355
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":354
 *            self.thisptr = new FactorGeneralTree()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":358
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorGeneralTree*>self.thisptr).Initialize(parents, num_states)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<int>  __pyx_v_parents;
  std::vector<int>  __pyx_v_num_states;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parents,&__pyx_n_s_num_states,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_states)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, 1); __PYX_ERR(0, 358, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 358, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parents = __pyx_convert_vector_from_py_int(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
    __pyx_v_num_states = __pyx_convert_vector_from_py_int(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 358, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 358, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTree.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *)__pyx_v_self), __pyx_v_parents, __pyx_v_num_states);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_18PFactorGeneralTree_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree *__pyx_v_self, std::vector<int>  __pyx_v_parents, std::vector<int>  __pyx_v_num_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":359
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):
 *         (<FactorGeneralTree*>self.thisptr).Initialize(parents, num_states)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorGeneralTree *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents, __pyx_v_num_states);

  /* "ad3/python/factor_graph.pyx":358
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorGeneralTree*>self.thisptr).Initialize(parents, num_states)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":363
 * 
 * cdef class PFactorGeneralTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_allocate = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_allocate,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_allocate);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(0, 363, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_allocate = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 363, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTreeCounts.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *)__pyx_v_self), __pyx_v_allocate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self, PyObject *__pyx_v_allocate) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  bool __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":364
 * cdef class PFactorGeneralTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate             # <<<<<<<<<<<<<<
 *         if allocate:
 *            self.thisptr = new FactorGeneralTreeCounts()
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely((__pyx_t_1 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 364, __pyx_L1_error)
  __pyx_v_self->__pyx_base.allocate = __pyx_t_1;

  /* "ad3/python/factor_graph.pyx":365
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorGeneralTreeCounts()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_allocate); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 365, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "ad3/python/factor_graph.pyx":366
 *         self.allocate = allocate
 *         if allocate:
 *            self.thisptr = new FactorGeneralTreeCounts()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    __pyx_v_self->__pyx_base.thisptr = new AD3::FactorGeneralTreeCounts();

    /* "ad3/python/factor_graph.pyx":365
 *     def __cinit__(self, allocate=True):
 *         self.allocate = allocate
 *         if allocate:             # <<<<<<<<<<<<<<
 *            self.thisptr = new FactorGeneralTreeCounts()
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":363
 * 
 * cdef class PFactorGeneralTreeCounts(PFactor):
 *     def __cinit__(self, allocate=True):             # <<<<<<<<<<<<<<
 *         self.allocate = allocate
 *         if allocate:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTreeCounts.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":368
 *            self.thisptr = new FactorGeneralTreeCounts()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":369
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  __pyx_t_1 = (__pyx_v_self->__pyx_base.allocate != 0);
  if (__pyx_t_1) {

    /* "ad3/python/factor_graph.pyx":370
 *     def __dealloc__(self):
 *         if self.allocate:
 *             del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):
 */
    delete __pyx_v_self->__pyx_base.thisptr;

    /* "ad3/python/factor_graph.pyx":369
 * 
 *     def __dealloc__(self):
 *         if self.allocate:             # <<<<<<<<<<<<<<
 *             del self.thisptr
 * 
 */
  }

  /* "ad3/python/factor_graph.pyx":368
 *            self.thisptr = new FactorGeneralTreeCounts()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.allocate:
 *             del self.thisptr
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":372
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorGeneralTreeCounts*>self.thisptr).Initialize(parents, num_states)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_5initialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<int>  __pyx_v_parents;
  std::vector<int>  __pyx_v_num_states;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_parents,&__pyx_n_s_num_states,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_parents)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_states)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, 1); __PYX_ERR(0, 372, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 372, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_parents = __pyx_convert_vector_from_py_int(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
    __pyx_v_num_states = __pyx_convert_vector_from_py_int(values[1]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 372, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGeneralTreeCounts.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_4initialize(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *)__pyx_v_self), __pyx_v_parents, __pyx_v_num_states);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_4initialize(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts *__pyx_v_self, std::vector<int>  __pyx_v_parents, std::vector<int>  __pyx_v_num_states) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "ad3/python/factor_graph.pyx":373
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):
 *         (<FactorGeneralTreeCounts*>self.thisptr).Initialize(parents, num_states)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ((AD3::FactorGeneralTreeCounts *)__pyx_v_self->__pyx_base.thisptr)->Initialize(__pyx_v_parents, __pyx_v_num_states);

  /* "ad3/python/factor_graph.pyx":372
 *             del self.thisptr
 * 
 *     def initialize(self, vector[int] parents, vector[int] num_states):             # <<<<<<<<<<<<<<
 *         (<FactorGeneralTreeCounts*>self.thisptr).Initialize(parents, num_states)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":378
 * cdef class PFactorGraph:
 *     cdef FactorGraph *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new FactorGraph()
 * 
 */

/* Python wrapper */
static int __pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph___cinit__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph___cinit__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "ad3/python/factor_graph.pyx":379
 *     cdef FactorGraph *thisptr
 *     def __cinit__(self):
 *         self.thisptr = new FactorGraph()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new AD3::FactorGraph();

  /* "ad3/python/factor_graph.pyx":378
 * cdef class PFactorGraph:
 *     cdef FactorGraph *thisptr
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new FactorGraph()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":381
 *         self.thisptr = new FactorGraph()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_2__dealloc__(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_2__dealloc__(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "ad3/python/factor_graph.pyx":382
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def set_verbosity(self, int verbosity):
 */
  delete __pyx_v_self->thisptr;

  /* "ad3/python/factor_graph.pyx":381
 *         self.thisptr = new FactorGraph()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "ad3/python/factor_graph.pyx":384
 *         del self.thisptr
 * 
 *     def set_verbosity(self, int verbosity):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetVerbosity(verbosity)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_5set_verbosity(PyObject *__pyx_v_self, PyObject *__pyx_arg_verbosity); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_5set_verbosity(PyObject *__pyx_v_self, PyObject *__pyx_arg_verbosity) {
  int __pyx_v_verbosity;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_verbosity (wrapper)", 0);
  assert(__pyx_arg_verbosity); {
    __pyx_v_verbosity = __Pyx_PyInt_As_int(__pyx_arg_verbosity); if (unlikely((__pyx_v_verbosity == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 384, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.set_verbosity", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_4set_verbosity(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((int)__pyx_v_verbosity));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_4set_verbosity(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_verbosity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_verbosity", 0);

  /* "ad3/python/factor_graph.pyx":385
 * 
 *     def set_verbosity(self, int verbosity):
 *         self.thisptr.SetVerbosity(verbosity)             # <<<<<<<<<<<<<<
 * 
 *     def create_binary_variable(self):
 */
  __pyx_v_self->thisptr->SetVerbosity(__pyx_v_verbosity);

  /* "ad3/python/factor_graph.pyx":384
 *         del self.thisptr
 * 
 *     def set_verbosity(self, int verbosity):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetVerbosity(verbosity)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":387
 *         self.thisptr.SetVerbosity(verbosity)
 * 
 *     def create_binary_variable(self):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable * variable =  self.thisptr.CreateBinaryVariable()
 *         pvariable = PBinaryVariable(allocate=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_7create_binary_variable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_7create_binary_variable(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_binary_variable (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_6create_binary_variable(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_6create_binary_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  AD3::BinaryVariable *__pyx_v_variable;
  struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *__pyx_v_pvariable = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_binary_variable", 0);

  /* "ad3/python/factor_graph.pyx":388
 * 
 *     def create_binary_variable(self):
 *         cdef BinaryVariable * variable =  self.thisptr.CreateBinaryVariable()             # <<<<<<<<<<<<<<
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 */
  __pyx_v_variable = __pyx_v_self->thisptr->CreateBinaryVariable();

  /* "ad3/python/factor_graph.pyx":389
 *     def create_binary_variable(self):
 *         cdef BinaryVariable * variable =  self.thisptr.CreateBinaryVariable()
 *         pvariable = PBinaryVariable(allocate=False)             # <<<<<<<<<<<<<<
 *         pvariable.thisptr = variable
 *         return pvariable
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ad3_6python_12factor_graph_PBinaryVariable), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pvariable = ((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":390
 *         cdef BinaryVariable * variable =  self.thisptr.CreateBinaryVariable()
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable             # <<<<<<<<<<<<<<
 *         return pvariable
 * 
 */
  __pyx_v_pvariable->thisptr = __pyx_v_variable;

  /* "ad3/python/factor_graph.pyx":391
 *         pvariable = PBinaryVariable(allocate=False)
 *         pvariable.thisptr = variable
 *         return pvariable             # <<<<<<<<<<<<<<
 * 
 *     def create_multi_variable(self, int num_states):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pvariable));
  __pyx_r = ((PyObject *)__pyx_v_pvariable);
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":387
 *         self.thisptr.SetVerbosity(verbosity)
 * 
 *     def create_binary_variable(self):             # <<<<<<<<<<<<<<
 *         cdef BinaryVariable * variable =  self.thisptr.CreateBinaryVariable()
 *         pvariable = PBinaryVariable(allocate=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_binary_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pvariable);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":393
 *         return pvariable
 * 
 *     def create_multi_variable(self, int num_states):             # <<<<<<<<<<<<<<
 *         cdef MultiVariable * mult =  self.thisptr.CreateMultiVariable(num_states)
 *         pmult = PMultiVariable(allocate=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_9create_multi_variable(PyObject *__pyx_v_self, PyObject *__pyx_arg_num_states); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_9create_multi_variable(PyObject *__pyx_v_self, PyObject *__pyx_arg_num_states) {
  int __pyx_v_num_states;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_multi_variable (wrapper)", 0);
  assert(__pyx_arg_num_states); {
    __pyx_v_num_states = __Pyx_PyInt_As_int(__pyx_arg_num_states); if (unlikely((__pyx_v_num_states == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_multi_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_8create_multi_variable(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((int)__pyx_v_num_states));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_8create_multi_variable(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_num_states) {
  AD3::MultiVariable *__pyx_v_mult;
  struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_pmult = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("create_multi_variable", 0);

  /* "ad3/python/factor_graph.pyx":394
 * 
 *     def create_multi_variable(self, int num_states):
 *         cdef MultiVariable * mult =  self.thisptr.CreateMultiVariable(num_states)             # <<<<<<<<<<<<<<
 *         pmult = PMultiVariable(allocate=False)
 *         pmult.thisptr = mult
 */
  __pyx_v_mult = __pyx_v_self->thisptr->CreateMultiVariable(__pyx_v_num_states);

  /* "ad3/python/factor_graph.pyx":395
 *     def create_multi_variable(self, int num_states):
 *         cdef MultiVariable * mult =  self.thisptr.CreateMultiVariable(num_states)
 *         pmult = PMultiVariable(allocate=False)             # <<<<<<<<<<<<<<
 *         pmult.thisptr = mult
 *         return pmult
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_allocate, Py_False) < 0) __PYX_ERR(0, 395, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_3ad3_6python_12factor_graph_PMultiVariable), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_pmult = ((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":396
 *         cdef MultiVariable * mult =  self.thisptr.CreateMultiVariable(num_states)
 *         pmult = PMultiVariable(allocate=False)
 *         pmult.thisptr = mult             # <<<<<<<<<<<<<<
 *         return pmult
 * 
 */
  __pyx_v_pmult->thisptr = __pyx_v_mult;

  /* "ad3/python/factor_graph.pyx":397
 *         pmult = PMultiVariable(allocate=False)
 *         pmult.thisptr = mult
 *         return pmult             # <<<<<<<<<<<<<<
 * 
 *     def create_factor_logic(self, factor_type, p_variables, p_negated, bool owned_by_graph=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_pmult));
  __pyx_r = ((PyObject *)__pyx_v_pmult);
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":393
 *         return pvariable
 * 
 *     def create_multi_variable(self, int num_states):             # <<<<<<<<<<<<<<
 *         cdef MultiVariable * mult =  self.thisptr.CreateMultiVariable(num_states)
 *         pmult = PMultiVariable(allocate=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_multi_variable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_pmult);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":399
 *         return pmult
 * 
 *     def create_factor_logic(self, factor_type, p_variables, p_negated, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_11create_factor_logic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_11create_factor_logic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_factor_type = 0;
  PyObject *__pyx_v_p_variables = 0;
  PyObject *__pyx_v_p_negated = 0;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_factor_logic (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factor_type,&__pyx_n_s_p_variables,&__pyx_n_s_p_negated,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factor_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_variables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_logic", 0, 3, 4, 1); __PYX_ERR(0, 399, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_negated)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_logic", 0, 3, 4, 2); __PYX_ERR(0, 399, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_factor_logic") < 0)) __PYX_ERR(0, 399, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_factor_type = values[0];
    __pyx_v_p_variables = values[1];
    __pyx_v_p_negated = values[2];
    if (values[3]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 399, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_factor_logic", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 399, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_logic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_10create_factor_logic(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_factor_type, __pyx_v_p_variables, __pyx_v_p_negated, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_10create_factor_logic(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_factor_type, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::BinaryVariable *>  __pyx_v_variables;
  std::vector<bool>  __pyx_v_negated;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("create_factor_logic", 0);

  /* "ad3/python/factor_graph.pyx":402
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_p_variables)) || PyTuple_CheckExact(__pyx_v_p_variables)) {
    __pyx_t_2 = __pyx_v_p_variables; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_p_variables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 402, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 402, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 402, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ad3/python/factor_graph.pyx":403
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)             # <<<<<<<<<<<<<<
 *             negated.push_back(p_negated[i])
 *         if factor_type == 'XOR':
 */
    try {
      __pyx_v_variables.push_back(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_var)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 403, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":404
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])             # <<<<<<<<<<<<<<
 *         if factor_type == 'XOR':
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_p_negated, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_v_negated.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 404, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":402
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":405
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 *         if factor_type == 'XOR':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'XOROUT':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_XOR, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 405, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":406
 *             negated.push_back(p_negated[i])
 *         if factor_type == 'XOR':
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'XOROUT':
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorXOR(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":405
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 *         if factor_type == 'XOR':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'XOROUT':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":407
 *         if factor_type == 'XOR':
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'XOROUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ATMOSTONE':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_XOROUT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 407, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":408
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'XOROUT':
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'ATMOSTONE':
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorXOROUT(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":407
 *         if factor_type == 'XOR':
 *             self.thisptr.CreateFactorXOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'XOROUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ATMOSTONE':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":409
 *         elif factor_type == 'XOROUT':
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ATMOSTONE':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 *         elif factor_type == 'OR':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_ATMOSTONE, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 409, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":410
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ATMOSTONE':
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'OR':
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorAtMostOne(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":409
 *         elif factor_type == 'XOROUT':
 *             self.thisptr.CreateFactorXOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ATMOSTONE':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 *         elif factor_type == 'OR':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":411
 *         elif factor_type == 'ATMOSTONE':
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 *         elif factor_type == 'OR':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'OROUT':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_OR, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 411, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":412
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 *         elif factor_type == 'OR':
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'OROUT':
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorOR(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":411
 *         elif factor_type == 'ATMOSTONE':
 *             self.thisptr.CreateFactorAtMostOne(variables, negated, owned_by_graph)
 *         elif factor_type == 'OR':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'OROUT':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":413
 *         elif factor_type == 'OR':
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'OROUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ANDOUT':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_OROUT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 413, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":414
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'OROUT':
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'ANDOUT':
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorOROUT(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":413
 *         elif factor_type == 'OR':
 *             self.thisptr.CreateFactorOR(variables, negated, owned_by_graph)
 *         elif factor_type == 'OROUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ANDOUT':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":415
 *         elif factor_type == 'OROUT':
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ANDOUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'IMPLY':
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_ANDOUT, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 415, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":416
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ANDOUT':
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         elif factor_type == 'IMPLY':
 *             self.thisptr.CreateFactorIMPLY(variables, negated, owned_by_graph)
 */
    __pyx_v_self->thisptr->CreateFactorANDOUT(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":415
 *         elif factor_type == 'OROUT':
 *             self.thisptr.CreateFactorOROUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'ANDOUT':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'IMPLY':
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":417
 *         elif factor_type == 'ANDOUT':
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'IMPLY':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorIMPLY(variables, negated, owned_by_graph)
 *         else:
 */
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_factor_type, __pyx_n_s_IMPLY, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 417, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "ad3/python/factor_graph.pyx":418
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'IMPLY':
 *             self.thisptr.CreateFactorIMPLY(variables, negated, owned_by_graph)             # <<<<<<<<<<<<<<
 *         else:
 *             print 'Unknown factor type:', factor_type
 */
    __pyx_v_self->thisptr->CreateFactorIMPLY(__pyx_v_variables, __pyx_v_negated, __pyx_v_owned_by_graph);

    /* "ad3/python/factor_graph.pyx":417
 *         elif factor_type == 'ANDOUT':
 *             self.thisptr.CreateFactorANDOUT(variables, negated, owned_by_graph)
 *         elif factor_type == 'IMPLY':             # <<<<<<<<<<<<<<
 *             self.thisptr.CreateFactorIMPLY(variables, negated, owned_by_graph)
 *         else:
 */
    goto __pyx_L5;
  }

  /* "ad3/python/factor_graph.pyx":420
 *             self.thisptr.CreateFactorIMPLY(variables, negated, owned_by_graph)
 *         else:
 *             print 'Unknown factor type:', factor_type             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 * 
 */
  /*else*/ {
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_s_Unknown_factor_type);
    __Pyx_GIVEREF(__pyx_kp_s_Unknown_factor_type);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Unknown_factor_type);
    __Pyx_INCREF(__pyx_v_factor_type);
    __Pyx_GIVEREF(__pyx_v_factor_type);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_factor_type);
    if (__Pyx_Print(0, __pyx_t_1, 1) < 0) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "ad3/python/factor_graph.pyx":421
 *         else:
 *             print 'Unknown factor type:', factor_type
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def create_factor_pair(self, p_variables, double edge_log_potential, bool owned_by_graph=True):
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(0, 421, __pyx_L1_error)
  }
  __pyx_L5:;

  /* "ad3/python/factor_graph.pyx":399
 *         return pmult
 * 
 *     def create_factor_logic(self, factor_type, p_variables, p_negated, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_logic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":423
 *             raise NotImplementedError
 * 
 *     def create_factor_pair(self, p_variables, double edge_log_potential, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         for var in p_variables:
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_13create_factor_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_13create_factor_pair(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_variables = 0;
  double __pyx_v_edge_log_potential;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_factor_pair (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_variables,&__pyx_n_s_edge_log_potential,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_variables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_edge_log_potential)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_pair", 0, 2, 3, 1); __PYX_ERR(0, 423, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_factor_pair") < 0)) __PYX_ERR(0, 423, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_variables = values[0];
    __pyx_v_edge_log_potential = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_edge_log_potential == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_factor_pair", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 423, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_12create_factor_pair(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_p_variables, __pyx_v_edge_log_potential, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_12create_factor_pair(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, double __pyx_v_edge_log_potential, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::BinaryVariable *>  __pyx_v_variables;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("create_factor_pair", 0);

  /* "ad3/python/factor_graph.pyx":425
 *     def create_factor_pair(self, p_variables, double edge_log_potential, bool owned_by_graph=True):
 *         cdef vector[BinaryVariable*] variables
 *         for var in p_variables:             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)
 */
  if (likely(PyList_CheckExact(__pyx_v_p_variables)) || PyTuple_CheckExact(__pyx_v_p_variables)) {
    __pyx_t_1 = __pyx_v_p_variables; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_variables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 425, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 425, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 425, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":426
 *         cdef vector[BinaryVariable*] variables
 *         for var in p_variables:
 *             variables.push_back((<PBinaryVariable>var).thisptr)             # <<<<<<<<<<<<<<
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)
 * 
 */
    try {
      __pyx_v_variables.push_back(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_var)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 426, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":425
 *     def create_factor_pair(self, p_variables, double edge_log_potential, bool owned_by_graph=True):
 *         cdef vector[BinaryVariable*] variables
 *         for var in p_variables:             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":427
 *         for var in p_variables:
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)             # <<<<<<<<<<<<<<
 * 
 *     def create_factor_budget(self, p_variables, p_negated, int budget, bool owned_by_graph=True):
 */
  __pyx_v_self->thisptr->CreateFactorPAIR(__pyx_v_variables, __pyx_v_edge_log_potential, __pyx_v_owned_by_graph);

  /* "ad3/python/factor_graph.pyx":423
 *             raise NotImplementedError
 * 
 *     def create_factor_pair(self, p_variables, double edge_log_potential, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         for var in p_variables:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":429
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)
 * 
 *     def create_factor_budget(self, p_variables, p_negated, int budget, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_15create_factor_budget(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_15create_factor_budget(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_variables = 0;
  PyObject *__pyx_v_p_negated = 0;
  int __pyx_v_budget;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_factor_budget (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_variables,&__pyx_n_s_p_negated,&__pyx_n_s_budget,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_variables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_negated)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_budget", 0, 3, 4, 1); __PYX_ERR(0, 429, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_budget)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_budget", 0, 3, 4, 2); __PYX_ERR(0, 429, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_factor_budget") < 0)) __PYX_ERR(0, 429, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_variables = values[0];
    __pyx_v_p_negated = values[1];
    __pyx_v_budget = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_budget == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_factor_budget", 0, 3, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 429, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_budget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_14create_factor_budget(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_p_variables, __pyx_v_p_negated, __pyx_v_budget, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_14create_factor_budget(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, int __pyx_v_budget, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::BinaryVariable *>  __pyx_v_variables;
  std::vector<bool>  __pyx_v_negated;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  __Pyx_RefNannySetupContext("create_factor_budget", 0);

  /* "ad3/python/factor_graph.pyx":432
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_p_variables)) || PyTuple_CheckExact(__pyx_v_p_variables)) {
    __pyx_t_2 = __pyx_v_p_variables; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_p_variables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 432, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ad3/python/factor_graph.pyx":433
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)             # <<<<<<<<<<<<<<
 *             negated.push_back(p_negated[i])
 *         self.thisptr.CreateFactorBUDGET(variables, negated, budget, owned_by_graph)
 */
    try {
      __pyx_v_variables.push_back(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_var)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 433, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":434
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])             # <<<<<<<<<<<<<<
 *         self.thisptr.CreateFactorBUDGET(variables, negated, budget, owned_by_graph)
 * 
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_p_negated, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_v_negated.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 434, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":432
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":435
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 *         self.thisptr.CreateFactorBUDGET(variables, negated, budget, owned_by_graph)             # <<<<<<<<<<<<<<
 * 
 *     def create_factor_knapsack(self, p_variables, p_negated, p_costs, double budget, bool owned_by_graph=True):
 */
  __pyx_v_self->thisptr->CreateFactorBUDGET(__pyx_v_variables, __pyx_v_negated, __pyx_v_budget, __pyx_v_owned_by_graph);

  /* "ad3/python/factor_graph.pyx":429
 *         self.thisptr.CreateFactorPAIR(variables, edge_log_potential, owned_by_graph)
 * 
 *     def create_factor_budget(self, p_variables, p_negated, int budget, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_budget", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":437
 *         self.thisptr.CreateFactorBUDGET(variables, negated, budget, owned_by_graph)
 * 
 *     def create_factor_knapsack(self, p_variables, p_negated, p_costs, double budget, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_17create_factor_knapsack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_17create_factor_knapsack(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_variables = 0;
  PyObject *__pyx_v_p_negated = 0;
  PyObject *__pyx_v_p_costs = 0;
  double __pyx_v_budget;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_factor_knapsack (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_variables,&__pyx_n_s_p_negated,&__pyx_n_s_p_costs,&__pyx_n_s_budget,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_variables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_negated)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_knapsack", 0, 4, 5, 1); __PYX_ERR(0, 437, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_costs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_knapsack", 0, 4, 5, 2); __PYX_ERR(0, 437, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_budget)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_knapsack", 0, 4, 5, 3); __PYX_ERR(0, 437, __pyx_L3_error)
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_factor_knapsack") < 0)) __PYX_ERR(0, 437, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_variables = values[0];
    __pyx_v_p_negated = values[1];
    __pyx_v_p_costs = values[2];
    __pyx_v_budget = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_budget == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
    if (values[4]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_factor_knapsack", 0, 4, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 437, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_knapsack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_16create_factor_knapsack(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_p_variables, __pyx_v_p_negated, __pyx_v_p_costs, __pyx_v_budget, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_16create_factor_knapsack(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_variables, PyObject *__pyx_v_p_negated, PyObject *__pyx_v_p_costs, double __pyx_v_budget, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::BinaryVariable *>  __pyx_v_variables;
  std::vector<bool>  __pyx_v_negated;
  std::vector<double>  __pyx_v_costs;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  bool __pyx_t_6;
  double __pyx_t_7;
  __Pyx_RefNannySetupContext("create_factor_knapsack", 0);

  /* "ad3/python/factor_graph.pyx":441
 *         cdef vector[bool] negated
 *         cdef vector[double] costs
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_1 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_p_variables)) || PyTuple_CheckExact(__pyx_v_p_variables)) {
    __pyx_t_2 = __pyx_v_p_variables; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_p_variables); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 441, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(0, 441, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 441, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "ad3/python/factor_graph.pyx":442
 *         cdef vector[double] costs
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)             # <<<<<<<<<<<<<<
 *             negated.push_back(p_negated[i])
 *             costs.push_back(p_costs[i])
 */
    try {
      __pyx_v_variables.push_back(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_var)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 442, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":443
 *         for i, var in enumerate(p_variables):
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])             # <<<<<<<<<<<<<<
 *             costs.push_back(p_costs[i])
 *         self.thisptr.CreateFactorKNAPSACK(variables, negated, costs, budget, owned_by_graph)
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_p_negated, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_v_negated.push_back(__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 443, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":444
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 *             costs.push_back(p_costs[i])             # <<<<<<<<<<<<<<
 *         self.thisptr.CreateFactorKNAPSACK(variables, negated, costs, budget, owned_by_graph)
 * 
 */
    __pyx_t_5 = PyObject_GetItem(__pyx_v_p_costs, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 444, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_v_costs.push_back(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 444, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":441
 *         cdef vector[bool] negated
 *         cdef vector[double] costs
 *         for i, var in enumerate(p_variables):             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *             negated.push_back(p_negated[i])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":445
 *             negated.push_back(p_negated[i])
 *             costs.push_back(p_costs[i])
 *         self.thisptr.CreateFactorKNAPSACK(variables, negated, costs, budget, owned_by_graph)             # <<<<<<<<<<<<<<
 * 
 *     def create_factor_dense(self,  p_multi_variables, p_additional_log_potentials, bool owned_by_graph=True):
 */
  __pyx_v_self->thisptr->CreateFactorKNAPSACK(__pyx_v_variables, __pyx_v_negated, __pyx_v_costs, __pyx_v_budget, __pyx_v_owned_by_graph);

  /* "ad3/python/factor_graph.pyx":437
 *         self.thisptr.CreateFactorBUDGET(variables, negated, budget, owned_by_graph)
 * 
 *     def create_factor_knapsack(self, p_variables, p_negated, p_costs, double budget, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef vector[bool] negated
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_knapsack", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":447
 *         self.thisptr.CreateFactorKNAPSACK(variables, negated, costs, budget, owned_by_graph)
 * 
 *     def create_factor_dense(self,  p_multi_variables, p_additional_log_potentials, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[MultiVariable*] multi_variables
 *         cdef PMultiVariable blub
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_19create_factor_dense(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_19create_factor_dense(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_multi_variables = 0;
  PyObject *__pyx_v_p_additional_log_potentials = 0;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_factor_dense (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_multi_variables,&__pyx_n_s_p_additional_log_potentials,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_multi_variables)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_additional_log_potentials)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("create_factor_dense", 0, 2, 3, 1); __PYX_ERR(0, 447, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "create_factor_dense") < 0)) __PYX_ERR(0, 447, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_multi_variables = values[0];
    __pyx_v_p_additional_log_potentials = values[1];
    if (values[2]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_factor_dense", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 447, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_18create_factor_dense(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_p_multi_variables, __pyx_v_p_additional_log_potentials, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_18create_factor_dense(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_multi_variables, PyObject *__pyx_v_p_additional_log_potentials, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::MultiVariable *>  __pyx_v_multi_variables;
  struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *__pyx_v_blub = 0;
  PyObject *__pyx_v_var = NULL;
  std::vector<double>  __pyx_v_additional_log_potentials;
  PyObject *__pyx_v_potential = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("create_factor_dense", 0);

  /* "ad3/python/factor_graph.pyx":450
 *         cdef vector[MultiVariable*] multi_variables
 *         cdef PMultiVariable blub
 *         for var in p_multi_variables:             # <<<<<<<<<<<<<<
 *             blub = var
 *             multi_variables.push_back(<MultiVariable*>blub.thisptr)
 */
  if (likely(PyList_CheckExact(__pyx_v_p_multi_variables)) || PyTuple_CheckExact(__pyx_v_p_multi_variables)) {
    __pyx_t_1 = __pyx_v_p_multi_variables; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_multi_variables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 450, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 450, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 450, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 450, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":451
 *         cdef PMultiVariable blub
 *         for var in p_multi_variables:
 *             blub = var             # <<<<<<<<<<<<<<
 *             multi_variables.push_back(<MultiVariable*>blub.thisptr)
 * 
 */
    if (!(likely(((__pyx_v_var) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_var, __pyx_ptype_3ad3_6python_12factor_graph_PMultiVariable))))) __PYX_ERR(0, 451, __pyx_L1_error)
    __pyx_t_4 = __pyx_v_var;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_XDECREF_SET(__pyx_v_blub, ((struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":452
 *         for var in p_multi_variables:
 *             blub = var
 *             multi_variables.push_back(<MultiVariable*>blub.thisptr)             # <<<<<<<<<<<<<<
 * 
 *         cdef vector[double] additional_log_potentials
 */
    try {
      __pyx_v_multi_variables.push_back(((AD3::MultiVariable *)__pyx_v_blub->thisptr));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 452, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":450
 *         cdef vector[MultiVariable*] multi_variables
 *         cdef PMultiVariable blub
 *         for var in p_multi_variables:             # <<<<<<<<<<<<<<
 *             blub = var
 *             multi_variables.push_back(<MultiVariable*>blub.thisptr)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":455
 * 
 *         cdef vector[double] additional_log_potentials
 *         for potential in p_additional_log_potentials:             # <<<<<<<<<<<<<<
 *             additional_log_potentials.push_back(potential)
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)
 */
  if (likely(PyList_CheckExact(__pyx_v_p_additional_log_potentials)) || PyTuple_CheckExact(__pyx_v_p_additional_log_potentials)) {
    __pyx_t_1 = __pyx_v_p_additional_log_potentials; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_additional_log_potentials); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 455, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 455, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 455, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_potential, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":456
 *         cdef vector[double] additional_log_potentials
 *         for potential in p_additional_log_potentials:
 *             additional_log_potentials.push_back(potential)             # <<<<<<<<<<<<<<
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_potential); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 456, __pyx_L1_error)
    try {
      __pyx_v_additional_log_potentials.push_back(__pyx_t_5);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 456, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":455
 * 
 *         cdef vector[double] additional_log_potentials
 *         for potential in p_additional_log_potentials:             # <<<<<<<<<<<<<<
 *             additional_log_potentials.push_back(potential)
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":457
 *         for potential in p_additional_log_potentials:
 *             additional_log_potentials.push_back(potential)
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)             # <<<<<<<<<<<<<<
 * 
 *     def declare_factor(self, p_factor, p_variables, bool owned_by_graph=False):
 */
  __pyx_v_self->thisptr->CreateFactorDense(__pyx_v_multi_variables, __pyx_v_additional_log_potentials, __pyx_v_owned_by_graph);

  /* "ad3/python/factor_graph.pyx":447
 *         self.thisptr.CreateFactorKNAPSACK(variables, negated, costs, budget, owned_by_graph)
 * 
 *     def create_factor_dense(self,  p_multi_variables, p_additional_log_potentials, bool owned_by_graph=True):             # <<<<<<<<<<<<<<
 *         cdef vector[MultiVariable*] multi_variables
 *         cdef PMultiVariable blub
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.create_factor_dense", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_blub);
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XDECREF(__pyx_v_potential);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":459
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)
 * 
 *     def declare_factor(self, p_factor, p_variables, bool owned_by_graph=False):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef Factor *factor
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_21declare_factor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_21declare_factor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_factor = 0;
  PyObject *__pyx_v_p_variables = 0;
  bool __pyx_v_owned_by_graph;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("declare_factor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_factor,&__pyx_n_s_p_variables,&__pyx_n_s_owned_by_graph,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_factor)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_variables)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("declare_factor", 0, 2, 3, 1); __PYX_ERR(0, 459, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_owned_by_graph);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "declare_factor") < 0)) __PYX_ERR(0, 459, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_factor = values[0];
    __pyx_v_p_variables = values[1];
    if (values[2]) {
      __pyx_v_owned_by_graph = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_owned_by_graph == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L3_error)
    } else {
      __pyx_v_owned_by_graph = ((bool)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("declare_factor", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.declare_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_20declare_factor(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), __pyx_v_p_factor, __pyx_v_p_variables, __pyx_v_owned_by_graph);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_20declare_factor(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, PyObject *__pyx_v_p_factor, PyObject *__pyx_v_p_variables, bool __pyx_v_owned_by_graph) {
  std::vector<AD3::BinaryVariable *>  __pyx_v_variables;
  AD3::Factor *__pyx_v_factor;
  PyObject *__pyx_v_var = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  AD3::Factor *__pyx_t_6;
  __Pyx_RefNannySetupContext("declare_factor", 0);

  /* "ad3/python/factor_graph.pyx":462
 *         cdef vector[BinaryVariable*] variables
 *         cdef Factor *factor
 *         for var in p_variables:             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:
 */
  if (likely(PyList_CheckExact(__pyx_v_p_variables)) || PyTuple_CheckExact(__pyx_v_p_variables)) {
    __pyx_t_1 = __pyx_v_p_variables; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_p_variables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 462, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 462, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 462, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_var, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":463
 *         cdef Factor *factor
 *         for var in p_variables:
 *             variables.push_back((<PBinaryVariable>var).thisptr)             # <<<<<<<<<<<<<<
 *         if owned_by_graph:
 *             p_factor.set_allocate(False)
 */
    try {
      __pyx_v_variables.push_back(((struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable *)__pyx_v_var)->thisptr);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 463, __pyx_L1_error)
    }

    /* "ad3/python/factor_graph.pyx":462
 *         cdef vector[BinaryVariable*] variables
 *         cdef Factor *factor
 *         for var in p_variables:             # <<<<<<<<<<<<<<
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":464
 *         for var in p_variables:
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:             # <<<<<<<<<<<<<<
 *             p_factor.set_allocate(False)
 *         factor = (<PFactor>p_factor).thisptr
 */
  __pyx_t_5 = (__pyx_v_owned_by_graph != 0);
  if (__pyx_t_5) {

    /* "ad3/python/factor_graph.pyx":465
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:
 *             p_factor.set_allocate(False)             # <<<<<<<<<<<<<<
 *         factor = (<PFactor>p_factor).thisptr
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_p_factor, __pyx_n_s_set_allocate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "ad3/python/factor_graph.pyx":464
 *         for var in p_variables:
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:             # <<<<<<<<<<<<<<
 *             p_factor.set_allocate(False)
 *         factor = (<PFactor>p_factor).thisptr
 */
  }

  /* "ad3/python/factor_graph.pyx":466
 *         if owned_by_graph:
 *             p_factor.set_allocate(False)
 *         factor = (<PFactor>p_factor).thisptr             # <<<<<<<<<<<<<<
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)
 * 
 */
  __pyx_t_6 = ((struct __pyx_obj_3ad3_6python_12factor_graph_PFactor *)__pyx_v_p_factor)->thisptr;
  __pyx_v_factor = __pyx_t_6;

  /* "ad3/python/factor_graph.pyx":467
 *             p_factor.set_allocate(False)
 *         factor = (<PFactor>p_factor).thisptr
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)             # <<<<<<<<<<<<<<
 * 
 *     def fix_multi_variables_without_factors(self):
 */
  __pyx_v_self->thisptr->DeclareFactor(__pyx_v_factor, __pyx_v_variables, __pyx_v_owned_by_graph);

  /* "ad3/python/factor_graph.pyx":459
 *         self.thisptr.CreateFactorDense(multi_variables, additional_log_potentials, owned_by_graph)
 * 
 *     def declare_factor(self, p_factor, p_variables, bool owned_by_graph=False):             # <<<<<<<<<<<<<<
 *         cdef vector[BinaryVariable*] variables
 *         cdef Factor *factor
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.declare_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_var);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":469
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)
 * 
 *     def fix_multi_variables_without_factors(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.FixMultiVariablesWithoutFactors()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_23fix_multi_variables_without_factors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_23fix_multi_variables_without_factors(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fix_multi_variables_without_factors (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_22fix_multi_variables_without_factors(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_22fix_multi_variables_without_factors(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fix_multi_variables_without_factors", 0);

  /* "ad3/python/factor_graph.pyx":470
 * 
 *     def fix_multi_variables_without_factors(self):
 *         self.thisptr.FixMultiVariablesWithoutFactors()             # <<<<<<<<<<<<<<
 * 
 *     def set_eta_psdd(self, double eta):
 */
  __pyx_v_self->thisptr->FixMultiVariablesWithoutFactors();

  /* "ad3/python/factor_graph.pyx":469
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)
 * 
 *     def fix_multi_variables_without_factors(self):             # <<<<<<<<<<<<<<
 *         self.thisptr.FixMultiVariablesWithoutFactors()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":472
 *         self.thisptr.FixMultiVariablesWithoutFactors()
 * 
 *     def set_eta_psdd(self, double eta):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetEtaPSDD(eta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_25set_eta_psdd(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_25set_eta_psdd(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta) {
  double __pyx_v_eta;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eta_psdd (wrapper)", 0);
  assert(__pyx_arg_eta); {
    __pyx_v_eta = __pyx_PyFloat_AsDouble(__pyx_arg_eta); if (unlikely((__pyx_v_eta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.set_eta_psdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_24set_eta_psdd(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((double)__pyx_v_eta));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_24set_eta_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, double __pyx_v_eta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eta_psdd", 0);

  /* "ad3/python/factor_graph.pyx":473
 * 
 *     def set_eta_psdd(self, double eta):
 *         self.thisptr.SetEtaPSDD(eta)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_iterations_psdd(self, int max_iterations):
 */
  __pyx_v_self->thisptr->SetEtaPSDD(__pyx_v_eta);

  /* "ad3/python/factor_graph.pyx":472
 *         self.thisptr.FixMultiVariablesWithoutFactors()
 * 
 *     def set_eta_psdd(self, double eta):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetEtaPSDD(eta)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":475
 *         self.thisptr.SetEtaPSDD(eta)
 * 
 *     def set_max_iterations_psdd(self, int max_iterations):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetMaxIterationsPSDD(max_iterations)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_27set_max_iterations_psdd(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_iterations); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_27set_max_iterations_psdd(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_iterations) {
  int __pyx_v_max_iterations;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_iterations_psdd (wrapper)", 0);
  assert(__pyx_arg_max_iterations); {
    __pyx_v_max_iterations = __Pyx_PyInt_As_int(__pyx_arg_max_iterations); if (unlikely((__pyx_v_max_iterations == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 475, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.set_max_iterations_psdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_26set_max_iterations_psdd(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((int)__pyx_v_max_iterations));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_26set_max_iterations_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_max_iterations) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_iterations_psdd", 0);

  /* "ad3/python/factor_graph.pyx":476
 * 
 *     def set_max_iterations_psdd(self, int max_iterations):
 *         self.thisptr.SetMaxIterationsPSDD(max_iterations)             # <<<<<<<<<<<<<<
 * 
 *     def solve_lp_map_psdd(self):
 */
  __pyx_v_self->thisptr->SetMaxIterationsPSDD(__pyx_v_max_iterations);

  /* "ad3/python/factor_graph.pyx":475
 *         self.thisptr.SetEtaPSDD(eta)
 * 
 *     def set_max_iterations_psdd(self, int max_iterations):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetMaxIterationsPSDD(max_iterations)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":478
 *         self.thisptr.SetMaxIterationsPSDD(max_iterations)
 * 
 *     def solve_lp_map_psdd(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_29solve_lp_map_psdd(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_29solve_lp_map_psdd(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_lp_map_psdd (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_28solve_lp_map_psdd(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_28solve_lp_map_psdd(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_posteriors;
  std::vector<double>  __pyx_v_additional_posteriors;
  double __pyx_v_value;
  PyObject *__pyx_v_p_posteriors = NULL;
  PyObject *__pyx_v_p_additional_posteriors = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("solve_lp_map_psdd", 0);

  /* "ad3/python/factor_graph.pyx":482
 *         cdef vector[double] additional_posteriors
 *         cdef double value
 *         self.thisptr.SolveLPMAPWithPSDD(&posteriors, &additional_posteriors,             # <<<<<<<<<<<<<<
 *                                         &value)
 *         p_posteriors, p_additional_posteriors = [], []
 */
  __pyx_v_self->thisptr->SolveLPMAPWithPSDD((&__pyx_v_posteriors), (&__pyx_v_additional_posteriors), (&__pyx_v_value));

  /* "ad3/python/factor_graph.pyx":484
 *         self.thisptr.SolveLPMAPWithPSDD(&posteriors, &additional_posteriors,
 *                                         &value)
 *         p_posteriors, p_additional_posteriors = [], []             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_p_posteriors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_p_additional_posteriors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":486
 *         p_posteriors, p_additional_posteriors = [], []
 *         cdef size_t i
 *         for i in range(posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 */
  __pyx_t_3 = __pyx_v_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":487
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])             # <<<<<<<<<<<<<<
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":488
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 */
  __pyx_t_3 = __pyx_v_additional_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":489
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])             # <<<<<<<<<<<<<<
 * 
 *         return value, p_posteriors, p_additional_posteriors
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_additional_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_additional_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":491
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 *         return value, p_posteriors, p_additional_posteriors             # <<<<<<<<<<<<<<
 * 
 *     def set_eta_ad3(self, double eta):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_p_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_p_posteriors);
  __Pyx_INCREF(__pyx_v_p_additional_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_additional_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_p_additional_posteriors);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":478
 *         self.thisptr.SetMaxIterationsPSDD(max_iterations)
 * 
 *     def solve_lp_map_psdd(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.solve_lp_map_psdd", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_posteriors);
  __Pyx_XDECREF(__pyx_v_p_additional_posteriors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":493
 *         return value, p_posteriors, p_additional_posteriors
 * 
 *     def set_eta_ad3(self, double eta):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetEtaAD3(eta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_31set_eta_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_31set_eta_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_eta) {
  double __pyx_v_eta;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eta_ad3 (wrapper)", 0);
  assert(__pyx_arg_eta); {
    __pyx_v_eta = __pyx_PyFloat_AsDouble(__pyx_arg_eta); if (unlikely((__pyx_v_eta == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.set_eta_ad3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_30set_eta_ad3(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((double)__pyx_v_eta));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_30set_eta_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, double __pyx_v_eta) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eta_ad3", 0);

  /* "ad3/python/factor_graph.pyx":494
 * 
 *     def set_eta_ad3(self, double eta):
 *         self.thisptr.SetEtaAD3(eta)             # <<<<<<<<<<<<<<
 * 
 *     def adapt_eta_ad3(self, bool adapt):
 */
  __pyx_v_self->thisptr->SetEtaAD3(__pyx_v_eta);

  /* "ad3/python/factor_graph.pyx":493
 *         return value, p_posteriors, p_additional_posteriors
 * 
 *     def set_eta_ad3(self, double eta):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetEtaAD3(eta)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":496
 *         self.thisptr.SetEtaAD3(eta)
 * 
 *     def adapt_eta_ad3(self, bool adapt):             # <<<<<<<<<<<<<<
 *         self.thisptr.AdaptEtaAD3(adapt)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_33adapt_eta_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_adapt); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_33adapt_eta_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_adapt) {
  bool __pyx_v_adapt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adapt_eta_ad3 (wrapper)", 0);
  assert(__pyx_arg_adapt); {
    __pyx_v_adapt = __Pyx_PyObject_IsTrue(__pyx_arg_adapt); if (unlikely((__pyx_v_adapt == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.adapt_eta_ad3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_32adapt_eta_ad3(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((bool)__pyx_v_adapt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_32adapt_eta_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, bool __pyx_v_adapt) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adapt_eta_ad3", 0);

  /* "ad3/python/factor_graph.pyx":497
 * 
 *     def adapt_eta_ad3(self, bool adapt):
 *         self.thisptr.AdaptEtaAD3(adapt)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_iterations_ad3(self, int max_iterations):
 */
  __pyx_v_self->thisptr->AdaptEtaAD3(__pyx_v_adapt);

  /* "ad3/python/factor_graph.pyx":496
 *         self.thisptr.SetEtaAD3(eta)
 * 
 *     def adapt_eta_ad3(self, bool adapt):             # <<<<<<<<<<<<<<
 *         self.thisptr.AdaptEtaAD3(adapt)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":499
 *         self.thisptr.AdaptEtaAD3(adapt)
 * 
 *     def set_max_iterations_ad3(self, int max_iterations):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetMaxIterationsAD3(max_iterations)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_35set_max_iterations_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_iterations); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_35set_max_iterations_ad3(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_iterations) {
  int __pyx_v_max_iterations;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_iterations_ad3 (wrapper)", 0);
  assert(__pyx_arg_max_iterations); {
    __pyx_v_max_iterations = __Pyx_PyInt_As_int(__pyx_arg_max_iterations); if (unlikely((__pyx_v_max_iterations == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.set_max_iterations_ad3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_34set_max_iterations_ad3(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self), ((int)__pyx_v_max_iterations));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_34set_max_iterations_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self, int __pyx_v_max_iterations) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_iterations_ad3", 0);

  /* "ad3/python/factor_graph.pyx":500
 * 
 *     def set_max_iterations_ad3(self, int max_iterations):
 *         self.thisptr.SetMaxIterationsAD3(max_iterations)             # <<<<<<<<<<<<<<
 * 
 *     def solve_lp_map_ad3(self):
 */
  __pyx_v_self->thisptr->SetMaxIterationsAD3(__pyx_v_max_iterations);

  /* "ad3/python/factor_graph.pyx":499
 *         self.thisptr.AdaptEtaAD3(adapt)
 * 
 *     def set_max_iterations_ad3(self, int max_iterations):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetMaxIterationsAD3(max_iterations)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":502
 *         self.thisptr.SetMaxIterationsAD3(max_iterations)
 * 
 *     def solve_lp_map_ad3(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_37solve_lp_map_ad3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_37solve_lp_map_ad3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_lp_map_ad3 (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_36solve_lp_map_ad3(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_36solve_lp_map_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_posteriors;
  std::vector<double>  __pyx_v_additional_posteriors;
  double __pyx_v_value;
  int __pyx_v_solver_status;
  PyObject *__pyx_v_p_posteriors = NULL;
  PyObject *__pyx_v_p_additional_posteriors = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("solve_lp_map_ad3", 0);

  /* "ad3/python/factor_graph.pyx":507
 *         cdef double value
 *         cdef int solver_status
 *         solver_status = self.thisptr.SolveLPMAPWithAD3(&posteriors,             # <<<<<<<<<<<<<<
 *                                                        &additional_posteriors,
 *                                                        &value)
 */
  __pyx_v_solver_status = __pyx_v_self->thisptr->SolveLPMAPWithAD3((&__pyx_v_posteriors), (&__pyx_v_additional_posteriors), (&__pyx_v_value));

  /* "ad3/python/factor_graph.pyx":510
 *                                                        &additional_posteriors,
 *                                                        &value)
 *         p_posteriors, p_additional_posteriors = [], []             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_p_posteriors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_p_additional_posteriors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":512
 *         p_posteriors, p_additional_posteriors = [], []
 *         cdef size_t i
 *         for i in range(posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 */
  __pyx_t_3 = __pyx_v_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":513
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])             # <<<<<<<<<<<<<<
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 513, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":514
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 */
  __pyx_t_3 = __pyx_v_additional_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":515
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])             # <<<<<<<<<<<<<<
 * 
 *         return value, p_posteriors, p_additional_posteriors, solver_status
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_additional_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_additional_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 515, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":517
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 *         return value, p_posteriors, p_additional_posteriors, solver_status             # <<<<<<<<<<<<<<
 * 
 *     def solve_exact_map_ad3(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_solver_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_p_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_posteriors);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_v_p_posteriors);
  __Pyx_INCREF(__pyx_v_p_additional_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_additional_posteriors);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_p_additional_posteriors);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":502
 *         self.thisptr.SetMaxIterationsAD3(max_iterations)
 * 
 *     def solve_lp_map_ad3(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.solve_lp_map_ad3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_posteriors);
  __Pyx_XDECREF(__pyx_v_p_additional_posteriors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":519
 *         return value, p_posteriors, p_additional_posteriors, solver_status
 * 
 *     def solve_exact_map_ad3(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_39solve_exact_map_ad3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_39solve_exact_map_ad3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve_exact_map_ad3 (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_38solve_exact_map_ad3(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_38solve_exact_map_ad3(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_posteriors;
  std::vector<double>  __pyx_v_additional_posteriors;
  double __pyx_v_value;
  CYTHON_UNUSED int __pyx_v_solver_status;
  PyObject *__pyx_v_p_posteriors = NULL;
  PyObject *__pyx_v_p_additional_posteriors = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("solve_exact_map_ad3", 0);

  /* "ad3/python/factor_graph.pyx":524
 *         cdef double value
 *         cdef int solver_status
 *         solver_status = self.thisptr.SolveExactMAPWithAD3(&posteriors,             # <<<<<<<<<<<<<<
 *                                                           &additional_posteriors,
 *                                                           &value)
 */
  __pyx_v_solver_status = __pyx_v_self->thisptr->SolveExactMAPWithAD3((&__pyx_v_posteriors), (&__pyx_v_additional_posteriors), (&__pyx_v_value));

  /* "ad3/python/factor_graph.pyx":527
 *                                                           &additional_posteriors,
 *                                                           &value)
 *         p_posteriors, p_additional_posteriors = [], []             # <<<<<<<<<<<<<<
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_p_posteriors = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_p_additional_posteriors = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "ad3/python/factor_graph.pyx":529
 *         p_posteriors, p_additional_posteriors = [], []
 *         cdef size_t i
 *         for i in range(posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 */
  __pyx_t_3 = __pyx_v_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":530
 *         cdef size_t i
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])             # <<<<<<<<<<<<<<
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":531
 *         for i in range(posteriors.size()):
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):             # <<<<<<<<<<<<<<
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 */
  __pyx_t_3 = __pyx_v_additional_posteriors.size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "ad3/python/factor_graph.pyx":532
 *             p_posteriors.append(posteriors[i])
 *         for i in range(additional_posteriors.size()):
 *             p_additional_posteriors.append(additional_posteriors[i])             # <<<<<<<<<<<<<<
 * 
 *         return value, p_posteriors, p_additional_posteriors
 */
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_additional_posteriors[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_p_additional_posteriors, __pyx_t_2); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "ad3/python/factor_graph.pyx":534
 *             p_additional_posteriors.append(additional_posteriors[i])
 * 
 *         return value, p_posteriors, p_additional_posteriors             # <<<<<<<<<<<<<<
 * 
 *     def get_dual_variables(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_v_p_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_p_posteriors);
  __Pyx_INCREF(__pyx_v_p_additional_posteriors);
  __Pyx_GIVEREF(__pyx_v_p_additional_posteriors);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_p_additional_posteriors);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":519
 *         return value, p_posteriors, p_additional_posteriors, solver_status
 * 
 *     def solve_exact_map_ad3(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] posteriors
 *         cdef vector[double] additional_posteriors
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.solve_exact_map_ad3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_posteriors);
  __Pyx_XDECREF(__pyx_v_p_additional_posteriors);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":536
 *         return value, p_posteriors, p_additional_posteriors
 * 
 *     def get_dual_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] dual_variables = self.thisptr.GetDualVariables()
 *         p_dual_variables = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_41get_dual_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_41get_dual_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_dual_variables (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_40get_dual_variables(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_40get_dual_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_dual_variables;
  PyObject *__pyx_v_p_dual_variables = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_dual_variables", 0);

  /* "ad3/python/factor_graph.pyx":537
 * 
 *     def get_dual_variables(self):
 *         cdef vector[double] dual_variables = self.thisptr.GetDualVariables()             # <<<<<<<<<<<<<<
 *         p_dual_variables = []
 *         for i in xrange(dual_variables.size()):
 */
  __pyx_v_dual_variables = __pyx_v_self->thisptr->GetDualVariables();

  /* "ad3/python/factor_graph.pyx":538
 *     def get_dual_variables(self):
 *         cdef vector[double] dual_variables = self.thisptr.GetDualVariables()
 *         p_dual_variables = []             # <<<<<<<<<<<<<<
 *         for i in xrange(dual_variables.size()):
 *             p_dual_variables.append(dual_variables[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p_dual_variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":539
 *         cdef vector[double] dual_variables = self.thisptr.GetDualVariables()
 *         p_dual_variables = []
 *         for i in xrange(dual_variables.size()):             # <<<<<<<<<<<<<<
 *             p_dual_variables.append(dual_variables[i])
 *         return p_dual_variables
 */
  __pyx_t_2 = __pyx_v_dual_variables.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ad3/python/factor_graph.pyx":540
 *         p_dual_variables = []
 *         for i in xrange(dual_variables.size()):
 *             p_dual_variables.append(dual_variables[i])             # <<<<<<<<<<<<<<
 *         return p_dual_variables
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_dual_variables[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_p_dual_variables, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "ad3/python/factor_graph.pyx":541
 *         for i in xrange(dual_variables.size()):
 *             p_dual_variables.append(dual_variables[i])
 *         return p_dual_variables             # <<<<<<<<<<<<<<
 * 
 *     def get_local_primal_variables(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p_dual_variables);
  __pyx_r = __pyx_v_p_dual_variables;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":536
 *         return value, p_posteriors, p_additional_posteriors
 * 
 *     def get_dual_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] dual_variables = self.thisptr.GetDualVariables()
 *         p_dual_variables = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.get_dual_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_dual_variables);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":543
 *         return p_dual_variables
 * 
 *     def get_local_primal_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] local_primal_variables = self.thisptr.GetLocalPrimalVariables()
 *         p_local_primal_variables = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_43get_local_primal_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_43get_local_primal_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_local_primal_variables (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_42get_local_primal_variables(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_42get_local_primal_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_local_primal_variables;
  PyObject *__pyx_v_p_local_primal_variables = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_local_primal_variables", 0);

  /* "ad3/python/factor_graph.pyx":544
 * 
 *     def get_local_primal_variables(self):
 *         cdef vector[double] local_primal_variables = self.thisptr.GetLocalPrimalVariables()             # <<<<<<<<<<<<<<
 *         p_local_primal_variables = []
 *         for i in xrange(local_primal_variables.size()):
 */
  __pyx_v_local_primal_variables = __pyx_v_self->thisptr->GetLocalPrimalVariables();

  /* "ad3/python/factor_graph.pyx":545
 *     def get_local_primal_variables(self):
 *         cdef vector[double] local_primal_variables = self.thisptr.GetLocalPrimalVariables()
 *         p_local_primal_variables = []             # <<<<<<<<<<<<<<
 *         for i in xrange(local_primal_variables.size()):
 *             p_local_primal_variables.append(local_primal_variables[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p_local_primal_variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":546
 *         cdef vector[double] local_primal_variables = self.thisptr.GetLocalPrimalVariables()
 *         p_local_primal_variables = []
 *         for i in xrange(local_primal_variables.size()):             # <<<<<<<<<<<<<<
 *             p_local_primal_variables.append(local_primal_variables[i])
 *         return p_local_primal_variables
 */
  __pyx_t_2 = __pyx_v_local_primal_variables.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ad3/python/factor_graph.pyx":547
 *         p_local_primal_variables = []
 *         for i in xrange(local_primal_variables.size()):
 *             p_local_primal_variables.append(local_primal_variables[i])             # <<<<<<<<<<<<<<
 *         return p_local_primal_variables
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_local_primal_variables[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_p_local_primal_variables, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "ad3/python/factor_graph.pyx":548
 *         for i in xrange(local_primal_variables.size()):
 *             p_local_primal_variables.append(local_primal_variables[i])
 *         return p_local_primal_variables             # <<<<<<<<<<<<<<
 * 
 *     def get_global_primal_variables(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p_local_primal_variables);
  __pyx_r = __pyx_v_p_local_primal_variables;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":543
 *         return p_dual_variables
 * 
 *     def get_local_primal_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] local_primal_variables = self.thisptr.GetLocalPrimalVariables()
 *         p_local_primal_variables = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.get_local_primal_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_local_primal_variables);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "ad3/python/factor_graph.pyx":550
 *         return p_local_primal_variables
 * 
 *     def get_global_primal_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] global_primal_variables = self.thisptr.GetGlobalPrimalVariables()
 *         p_global_primal_variables = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_45get_global_primal_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_45get_global_primal_variables(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_global_primal_variables (wrapper)", 0);
  __pyx_r = __pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_44get_global_primal_variables(((struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_3ad3_6python_12factor_graph_12PFactorGraph_44get_global_primal_variables(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph *__pyx_v_self) {
  std::vector<double>  __pyx_v_global_primal_variables;
  PyObject *__pyx_v_p_global_primal_variables = NULL;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("get_global_primal_variables", 0);

  /* "ad3/python/factor_graph.pyx":551
 * 
 *     def get_global_primal_variables(self):
 *         cdef vector[double] global_primal_variables = self.thisptr.GetGlobalPrimalVariables()             # <<<<<<<<<<<<<<
 *         p_global_primal_variables = []
 *         for i in xrange(global_primal_variables.size()):
 */
  __pyx_v_global_primal_variables = __pyx_v_self->thisptr->GetGlobalPrimalVariables();

  /* "ad3/python/factor_graph.pyx":552
 *     def get_global_primal_variables(self):
 *         cdef vector[double] global_primal_variables = self.thisptr.GetGlobalPrimalVariables()
 *         p_global_primal_variables = []             # <<<<<<<<<<<<<<
 *         for i in xrange(global_primal_variables.size()):
 *             p_global_primal_variables.append(global_primal_variables[i])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p_global_primal_variables = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":553
 *         cdef vector[double] global_primal_variables = self.thisptr.GetGlobalPrimalVariables()
 *         p_global_primal_variables = []
 *         for i in xrange(global_primal_variables.size()):             # <<<<<<<<<<<<<<
 *             p_global_primal_variables.append(global_primal_variables[i])
 *         return p_global_primal_variables
 */
  __pyx_t_2 = __pyx_v_global_primal_variables.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "ad3/python/factor_graph.pyx":554
 *         p_global_primal_variables = []
 *         for i in xrange(global_primal_variables.size()):
 *             p_global_primal_variables.append(global_primal_variables[i])             # <<<<<<<<<<<<<<
 *         return p_global_primal_variables
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_global_primal_variables[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_p_global_primal_variables, __pyx_t_1); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "ad3/python/factor_graph.pyx":555
 *         for i in xrange(global_primal_variables.size()):
 *             p_global_primal_variables.append(global_primal_variables[i])
 *         return p_global_primal_variables             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_p_global_primal_variables);
  __pyx_r = __pyx_v_p_global_primal_variables;
  goto __pyx_L0;

  /* "ad3/python/factor_graph.pyx":550
 *         return p_local_primal_variables
 * 
 *     def get_global_primal_variables(self):             # <<<<<<<<<<<<<<
 *         cdef vector[double] global_primal_variables = self.thisptr.GetGlobalPrimalVariables()
 *         p_global_primal_variables = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("ad3.python.factor_graph.PFactorGraph.get_global_primal_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_p_global_primal_variables);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) __PYX_ERR(1, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PBinaryVariable(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PBinaryVariable(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PBinaryVariable[] = {
  {"get_log_potential", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_5get_log_potential, METH_NOARGS, 0},
  {"set_log_potential", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_7set_log_potential, METH_O, 0},
  {"get_id", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_9get_id, METH_NOARGS, 0},
  {"get_degree", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_15PBinaryVariable_11get_degree, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PBinaryVariable = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PBinaryVariable", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PBinaryVariable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PBinaryVariable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PBinaryVariable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PBinaryVariable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PMultiVariable(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PMultiVariable(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PMultiVariable[] = {
  {"get_state", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_5get_state, METH_O, 0},
  {"get_log_potential", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_7get_log_potential, METH_O, 0},
  {"set_log_potential", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_14PMultiVariable_9set_log_potential, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PMultiVariable = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PMultiVariable", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PMultiVariable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PMultiVariable, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PMultiVariable, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PMultiVariable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactor(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_7PFactor_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_7PFactor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactor[] = {
  {"set_allocate", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_5set_allocate, METH_O, 0},
  {"get_additional_log_potentials", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_7get_additional_log_potentials, METH_NOARGS, 0},
  {"set_additional_log_potentials", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_9set_additional_log_potentials, METH_O, 0},
  {"get_degree", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_11get_degree, METH_NOARGS, 0},
  {"get_link_id", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_13get_link_id, METH_O, 0},
  {"get_variable", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_15get_variable, METH_O, 0},
  {"solve_map", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_7PFactor_17solve_map, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactor = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactor", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequence(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorSequence(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorSequence[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_15PFactorSequence_5initialize, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorSequence = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorSequence", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorSequence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorSequence, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequenceCompressor(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorSequenceCompressor(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorSequenceCompressor[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_25PFactorSequenceCompressor_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorSequenceCompressor", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorSequenceCompressor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorSequenceCompressor, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorSequenceCompressor, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorSequenceCompressor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorCompressionBudget(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorCompressionBudget(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorCompressionBudget[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_24PFactorCompressionBudget_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorCompressionBudget", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorCompressionBudget), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorCompressionBudget, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorCompressionBudget, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorCompressionBudget, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTree(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorBinaryTree(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorBinaryTree[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_17PFactorBinaryTree_5initialize, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorBinaryTree", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorBinaryTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorBinaryTree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_23PFactorBinaryTreeCounts_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorBinaryTreeCounts", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTree(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGeneralTree(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorGeneralTree[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_18PFactorGeneralTree_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorGeneralTree", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTree), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGeneralTree, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorGeneralTree, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTree, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_3ad3_6python_12factor_graph_PFactor(t, a, k);
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactor(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts[] = {
  {"initialize", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_24PFactorGeneralTreeCounts_5initialize, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorGeneralTreeCounts", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_3ad3_6python_12factor_graph_PFactorGraph(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGraph(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_3ad3_6python_12factor_graph_PFactorGraph[] = {
  {"set_verbosity", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_5set_verbosity, METH_O, 0},
  {"create_binary_variable", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_7create_binary_variable, METH_NOARGS, 0},
  {"create_multi_variable", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_9create_multi_variable, METH_O, 0},
  {"create_factor_logic", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_11create_factor_logic, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_factor_pair", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_13create_factor_pair, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_factor_budget", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_15create_factor_budget, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_factor_knapsack", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_17create_factor_knapsack, METH_VARARGS|METH_KEYWORDS, 0},
  {"create_factor_dense", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_19create_factor_dense, METH_VARARGS|METH_KEYWORDS, 0},
  {"declare_factor", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_21declare_factor, METH_VARARGS|METH_KEYWORDS, 0},
  {"fix_multi_variables_without_factors", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_23fix_multi_variables_without_factors, METH_NOARGS, 0},
  {"set_eta_psdd", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_25set_eta_psdd, METH_O, 0},
  {"set_max_iterations_psdd", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_27set_max_iterations_psdd, METH_O, 0},
  {"solve_lp_map_psdd", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_29solve_lp_map_psdd, METH_NOARGS, 0},
  {"set_eta_ad3", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_31set_eta_ad3, METH_O, 0},
  {"adapt_eta_ad3", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_33adapt_eta_ad3, METH_O, 0},
  {"set_max_iterations_ad3", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_35set_max_iterations_ad3, METH_O, 0},
  {"solve_lp_map_ad3", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_37solve_lp_map_ad3, METH_NOARGS, 0},
  {"solve_exact_map_ad3", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_39solve_exact_map_ad3, METH_NOARGS, 0},
  {"get_dual_variables", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_41get_dual_variables, METH_NOARGS, 0},
  {"get_local_primal_variables", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_43get_local_primal_variables, METH_NOARGS, 0},
  {"get_global_primal_variables", (PyCFunction)__pyx_pw_3ad3_6python_12factor_graph_12PFactorGraph_45get_global_primal_variables, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_3ad3_6python_12factor_graph_PFactorGraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "ad3.python.factor_graph.PFactorGraph", /*tp_name*/
  sizeof(struct __pyx_obj_3ad3_6python_12factor_graph_PFactorGraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_3ad3_6python_12factor_graph_PFactorGraph, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_3ad3_6python_12factor_graph_PFactorGraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_3ad3_6python_12factor_graph_PFactorGraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "factor_graph",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_ANDOUT, __pyx_k_ANDOUT, sizeof(__pyx_k_ANDOUT), 0, 0, 1, 1},
  {&__pyx_n_s_ATMOSTONE, __pyx_k_ATMOSTONE, sizeof(__pyx_k_ATMOSTONE), 0, 0, 1, 1},
  {&__pyx_n_s_IMPLY, __pyx_k_IMPLY, sizeof(__pyx_k_IMPLY), 0, 0, 1, 1},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OR, __pyx_k_OR, sizeof(__pyx_k_OR), 0, 0, 1, 1},
  {&__pyx_n_s_OROUT, __pyx_k_OROUT, sizeof(__pyx_k_OROUT), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_factor_type, __pyx_k_Unknown_factor_type, sizeof(__pyx_k_Unknown_factor_type), 0, 0, 1, 0},
  {&__pyx_n_s_XOR, __pyx_k_XOR, sizeof(__pyx_k_XOR), 0, 0, 1, 1},
  {&__pyx_n_s_XOROUT, __pyx_k_XOROUT, sizeof(__pyx_k_XOROUT), 0, 0, 1, 1},
  {&__pyx_n_s_additional_log_potentials, __pyx_k_additional_log_potentials, sizeof(__pyx_k_additional_log_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_allocate, __pyx_k_allocate, sizeof(__pyx_k_allocate), 0, 0, 1, 1},
  {&__pyx_n_s_bigram_positions, __pyx_k_bigram_positions, sizeof(__pyx_k_bigram_positions), 0, 0, 1, 1},
  {&__pyx_n_s_budget, __pyx_k_budget, sizeof(__pyx_k_budget), 0, 0, 1, 1},
  {&__pyx_n_s_edge_log_potential, __pyx_k_edge_log_potential, sizeof(__pyx_k_edge_log_potential), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_factor_type, __pyx_k_factor_type, sizeof(__pyx_k_factor_type), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_left_positions, __pyx_k_left_positions, sizeof(__pyx_k_left_positions), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_log_potential, __pyx_k_log_potential, sizeof(__pyx_k_log_potential), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_num_bins, __pyx_k_max_num_bins, sizeof(__pyx_k_max_num_bins), 0, 0, 1, 1},
  {&__pyx_n_s_num_states, __pyx_k_num_states, sizeof(__pyx_k_num_states), 0, 0, 1, 1},
  {&__pyx_n_s_owned_by_graph, __pyx_k_owned_by_graph, sizeof(__pyx_k_owned_by_graph), 0, 0, 1, 1},
  {&__pyx_n_s_p_additional_log_potentials, __pyx_k_p_additional_log_potentials, sizeof(__pyx_k_p_additional_log_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_p_costs, __pyx_k_p_costs, sizeof(__pyx_k_p_costs), 0, 0, 1, 1},
  {&__pyx_n_s_p_factor, __pyx_k_p_factor, sizeof(__pyx_k_p_factor), 0, 0, 1, 1},
  {&__pyx_n_s_p_multi_variables, __pyx_k_p_multi_variables, sizeof(__pyx_k_p_multi_variables), 0, 0, 1, 1},
  {&__pyx_n_s_p_negated, __pyx_k_p_negated, sizeof(__pyx_k_p_negated), 0, 0, 1, 1},
  {&__pyx_n_s_p_variables, __pyx_k_p_variables, sizeof(__pyx_k_p_variables), 0, 0, 1, 1},
  {&__pyx_n_s_parents, __pyx_k_parents, sizeof(__pyx_k_parents), 0, 0, 1, 1},
  {&__pyx_n_s_pcounts_for_budget, __pyx_k_pcounts_for_budget, sizeof(__pyx_k_pcounts_for_budget), 0, 0, 1, 1},
  {&__pyx_n_s_pdb, __pyx_k_pdb, sizeof(__pyx_k_pdb), 0, 0, 1, 1},
  {&__pyx_n_s_phas_count_scores, __pyx_k_phas_count_scores, sizeof(__pyx_k_phas_count_scores), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_right_positions, __pyx_k_right_positions, sizeof(__pyx_k_right_positions), 0, 0, 1, 1},
  {&__pyx_n_s_set_allocate, __pyx_k_set_allocate, sizeof(__pyx_k_set_allocate), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_variable_log_potentials, __pyx_k_variable_log_potentials, sizeof(__pyx_k_variable_log_potentials), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(0, 215, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(0, 215, __pyx_L1_error)
  #endif
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 244, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 421, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "ad3/python/factor_graph.pyx":465
 *             variables.push_back((<PBinaryVariable>var).thisptr)
 *         if owned_by_graph:
 *             p_factor.set_allocate(False)             # <<<<<<<<<<<<<<
 *         factor = (<PFactor>p_factor).thisptr
 *         self.thisptr.DeclareFactor(factor, variables, owned_by_graph)
 */
  __pyx_tuple_ = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initfactor_graph(void); /*proto*/
PyMODINIT_FUNC initfactor_graph(void)
#else
PyMODINIT_FUNC PyInit_factor_graph(void); /*proto*/
PyMODINIT_FUNC PyInit_factor_graph(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_factor_graph(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("factor_graph", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_ad3__python__factor_graph) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "ad3.python.factor_graph")) {
      if (unlikely(PyDict_SetItemString(modules, "ad3.python.factor_graph", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PBinaryVariable) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PBinaryVariable.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PBinaryVariable", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PBinaryVariable) < 0) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PBinaryVariable = &__pyx_type_3ad3_6python_12factor_graph_PBinaryVariable;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PMultiVariable) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PMultiVariable.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PMultiVariable", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PMultiVariable) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PMultiVariable = &__pyx_type_3ad3_6python_12factor_graph_PMultiVariable;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactor) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactor.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactor", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactor) < 0) __PYX_ERR(0, 196, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactor = &__pyx_type_3ad3_6python_12factor_graph_PFactor;
  __pyx_type_3ad3_6python_12factor_graph_PFactorSequence.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorSequence) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorSequence.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorSequence", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorSequence) < 0) __PYX_ERR(0, 251, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorSequence = &__pyx_type_3ad3_6python_12factor_graph_PFactorSequence;
  __pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorSequenceCompressor", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor) < 0) __PYX_ERR(0, 265, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorSequenceCompressor = &__pyx_type_3ad3_6python_12factor_graph_PFactorSequenceCompressor;
  __pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorCompressionBudget", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget) < 0) __PYX_ERR(0, 279, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorCompressionBudget = &__pyx_type_3ad3_6python_12factor_graph_PFactorCompressionBudget;
  __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorBinaryTree", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorBinaryTree = &__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTree;
  __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorBinaryTreeCounts", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts) < 0) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts = &__pyx_type_3ad3_6python_12factor_graph_PFactorBinaryTreeCounts;
  __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorGeneralTree", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree) < 0) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorGeneralTree = &__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTree;
  __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts.tp_base = __pyx_ptype_3ad3_6python_12factor_graph_PFactor;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts) < 0) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorGeneralTreeCounts", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts) < 0) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts = &__pyx_type_3ad3_6python_12factor_graph_PFactorGeneralTreeCounts;
  if (PyType_Ready(&__pyx_type_3ad3_6python_12factor_graph_PFactorGraph) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_type_3ad3_6python_12factor_graph_PFactorGraph.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PFactorGraph", (PyObject *)&__pyx_type_3ad3_6python_12factor_graph_PFactorGraph) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_ptype_3ad3_6python_12factor_graph_PFactorGraph = &__pyx_type_3ad3_6python_12factor_graph_PFactorGraph;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "ad3/python/factor_graph.pyx":4
 * from libcpp cimport bool
 * 
 * import pdb             # <<<<<<<<<<<<<<
 * 
 * # get the classes from the c++ headers
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_pdb, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pdb, __pyx_t_1) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "ad3/python/factor_graph.pyx":1
 * from libcpp.vector cimport vector             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * 
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init ad3.python.factor_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init ad3.python.factor_graph");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* KeywordStringCheck */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* Print */
  #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
  #else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
  #endif
#else
  res = PyNumber_Int(x);
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
